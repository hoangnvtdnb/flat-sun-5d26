// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LeagueConfig } from '../../../../../royal/infrastructure/services/backend/protocol/league-config.js';


export class LeagueProgress {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LeagueProgress {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLeagueProgress(bb:flatbuffers.ByteBuffer, obj?:LeagueProgress):LeagueProgress {
  return (obj || new LeagueProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLeagueProgress(bb:flatbuffers.ByteBuffer, obj?:LeagueProgress):LeagueProgress {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LeagueProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

groupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

leagueLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rank():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

remainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

depreciatedLeagueConfig(obj?:LeagueConfig):LeagueConfig|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new LeagueConfig()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

config(obj?:LeagueConfig):LeagueConfig|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new LeagueConfig()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

crown():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startLeagueProgress(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addGroupId(builder:flatbuffers.Builder, groupId:bigint) {
  builder.addFieldInt64(0, groupId, BigInt('0'));
}

static addLeagueLevel(builder:flatbuffers.Builder, leagueLevel:number) {
  builder.addFieldInt32(1, leagueLevel, 0);
}

static addRank(builder:flatbuffers.Builder, rank:number) {
  builder.addFieldInt32(2, rank, 0);
}

static addRemainingTime(builder:flatbuffers.Builder, remainingTime:bigint) {
  builder.addFieldInt64(3, remainingTime, BigInt('0'));
}

static addDepreciatedLeagueConfig(builder:flatbuffers.Builder, depreciatedLeagueConfigOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, depreciatedLeagueConfigOffset, 0);
}

static addConfig(builder:flatbuffers.Builder, configOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, configOffset, 0);
}

static addCrown(builder:flatbuffers.Builder, crown:number) {
  builder.addFieldInt32(6, crown, 0);
}

static endLeagueProgress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
