// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ClaimSpaceMissionRewardRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClaimSpaceMissionRewardRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClaimSpaceMissionRewardRequest(bb:flatbuffers.ByteBuffer, obj?:ClaimSpaceMissionRewardRequest):ClaimSpaceMissionRewardRequest {
  return (obj || new ClaimSpaceMissionRewardRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClaimSpaceMissionRewardRequest(bb:flatbuffers.ByteBuffer, obj?:ClaimSpaceMissionRewardRequest):ClaimSpaceMissionRewardRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClaimSpaceMissionRewardRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

groupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

isWinner():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startClaimSpaceMissionRewardRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addGroupId(builder:flatbuffers.Builder, groupId:bigint) {
  builder.addFieldInt64(0, groupId, BigInt('0'));
}

static addIsWinner(builder:flatbuffers.Builder, isWinner:boolean) {
  builder.addFieldInt8(1, +isWinner, +false);
}

static endClaimSpaceMissionRewardRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createClaimSpaceMissionRewardRequest(builder:flatbuffers.Builder, groupId:bigint, isWinner:boolean):flatbuffers.Offset {
  ClaimSpaceMissionRewardRequest.startClaimSpaceMissionRewardRequest(builder);
  ClaimSpaceMissionRewardRequest.addGroupId(builder, groupId);
  ClaimSpaceMissionRewardRequest.addIsWinner(builder, isWinner);
  return ClaimSpaceMissionRewardRequest.endClaimSpaceMissionRewardRequest(builder);
}
}
