// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ArcheryArenaInfo } from '../../../../../royal/infrastructure/services/backend/protocol/archery-arena-info.js';
import { BalloonRiseInfo } from '../../../../../royal/infrastructure/services/backend/protocol/balloon-rise-info.js';
import { DailyLightningRushInfo } from '../../../../../royal/infrastructure/services/backend/protocol/daily-lightning-rush-info.js';
import { DragonNestInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dragon-nest-info.js';
import { DukesFortuneInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dukes-fortune-info.js';
import { DynamicOfferAllInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dynamic-offer-all-info.js';
import { EventDependencyInfo } from '../../../../../royal/infrastructure/services/backend/protocol/event-dependency-info.js';
import { GoldenOffersInfo } from '../../../../../royal/infrastructure/services/backend/protocol/golden-offers-info.js';
import { HiddenTempleInfo } from '../../../../../royal/infrastructure/services/backend/protocol/hidden-temple-info.js';
import { KingsCupInfo } from '../../../../../royal/infrastructure/services/backend/protocol/kings-cup-info.js';
import { LadderOfferInfo } from '../../../../../royal/infrastructure/services/backend/protocol/ladder-offer-info.js';
import { LavaQuestInfo } from '../../../../../royal/infrastructure/services/backend/protocol/lava-quest-info.js';
import { LightningRushInfo } from '../../../../../royal/infrastructure/services/backend/protocol/lightning-rush-info.js';
import { LogData } from '../../../../../royal/infrastructure/services/backend/protocol/log-data.js';
import { MadnessEventInfo } from '../../../../../royal/infrastructure/services/backend/protocol/madness-event-info.js';
import { MagicCauldronInfo } from '../../../../../royal/infrastructure/services/backend/protocol/magic-cauldron-info.js';
import { MissionControlInfo } from '../../../../../royal/infrastructure/services/backend/protocol/mission-control-info.js';
import { MissionPursuitInfo } from '../../../../../royal/infrastructure/services/backend/protocol/mission-pursuit-info.js';
import { NewABData } from '../../../../../royal/infrastructure/services/backend/protocol/new-abdata.js';
import { NewRoyalPassInfo } from '../../../../../royal/infrastructure/services/backend/protocol/new-royal-pass-info.js';
import { OceanOdysseyInfo } from '../../../../../royal/infrastructure/services/backend/protocol/ocean-odyssey-info.js';
import { PinataPartyInfo } from '../../../../../royal/infrastructure/services/backend/protocol/pinata-party-info.js';
import { PuzzleBreakInfo } from '../../../../../royal/infrastructure/services/backend/protocol/puzzle-break-info.js';
import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';
import { RoyalPassInfo } from '../../../../../royal/infrastructure/services/backend/protocol/royal-pass-info.js';
import { SeasonalCardCollectionInfo } from '../../../../../royal/infrastructure/services/backend/protocol/seasonal-card-collection-info.js';
import { SeasonalCardPackOfferEventInfo } from '../../../../../royal/infrastructure/services/backend/protocol/seasonal-card-pack-offer-event-info.js';
import { SkyRaceInfo } from '../../../../../royal/infrastructure/services/backend/protocol/sky-race-info.js';
import { SpaceMissionInfo } from '../../../../../royal/infrastructure/services/backend/protocol/space-mission-info.js';
import { SpecialOfferEventInfo } from '../../../../../royal/infrastructure/services/backend/protocol/special-offer-event-info.js';
import { TeamBattleInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-battle-info.js';
import { TeamGiftOfferInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-gift-offer-info.js';
import { TeamTournamentInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-tournament-info.js';
import { TeamTreasureInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-treasure-info.js';
import { TrainJourneyInfo } from '../../../../../royal/infrastructure/services/backend/protocol/train-journey-info.js';
import { UserProgress } from '../../../../../royal/infrastructure/services/backend/protocol/user-progress.js';


export class UpdateUserProgressResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateUserProgressResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateUserProgressResponse(bb:flatbuffers.ByteBuffer, obj?:UpdateUserProgressResponse):UpdateUserProgressResponse {
  return (obj || new UpdateUserProgressResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateUserProgressResponse(bb:flatbuffers.ByteBuffer, obj?:UpdateUserProgressResponse):UpdateUserProgressResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateUserProgressResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

userProgress(obj?:UserProgress):UserProgress|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new UserProgress()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

teamExist():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

leagueRank():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

leagueRemainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

kingsCupInfo(obj?:KingsCupInfo):KingsCupInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new KingsCupInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

teamBattleInfo(obj?:TeamBattleInfo):TeamBattleInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new TeamBattleInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

madnessEventInfo(obj?:MadnessEventInfo):MadnessEventInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new MadnessEventInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

logData(obj?:LogData):LogData|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new LogData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

ladderOfferInfo(obj?:LadderOfferInfo):LadderOfferInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new LadderOfferInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

royalPassInfo(obj?:RoyalPassInfo):RoyalPassInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new RoyalPassInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

skyRaceInfo(obj?:SkyRaceInfo):SkyRaceInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new SkyRaceInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

specialOfferEventInfo(obj?:SpecialOfferEventInfo):SpecialOfferEventInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new SpecialOfferEventInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

pinataPartyInfo(obj?:PinataPartyInfo):PinataPartyInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new PinataPartyInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

teamTreasureInfo(obj?:TeamTreasureInfo):TeamTreasureInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new TeamTreasureInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

teamGiftOfferInfo(obj?:TeamGiftOfferInfo):TeamGiftOfferInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new TeamGiftOfferInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

lightningRushInfo(obj?:LightningRushInfo):LightningRushInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? (obj || new LightningRushInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

spaceMissionInfo(obj?:SpaceMissionInfo):SpaceMissionInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? (obj || new SpaceMissionInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

balloonRiseInfo(obj?:BalloonRiseInfo):BalloonRiseInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? (obj || new BalloonRiseInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

hiddenTempleInfo(obj?:HiddenTempleInfo):HiddenTempleInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? (obj || new HiddenTempleInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

magicCauldronInfo(obj?:MagicCauldronInfo):MagicCauldronInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? (obj || new MagicCauldronInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dragonNestInfo(obj?:DragonNestInfo):DragonNestInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? (obj || new DragonNestInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

archeryArenaInfo(obj?:ArcheryArenaInfo):ArcheryArenaInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? (obj || new ArcheryArenaInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dukesFortuneInfo(obj?:DukesFortuneInfo):DukesFortuneInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? (obj || new DukesFortuneInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

eventDependencyInfo(obj?:EventDependencyInfo):EventDependencyInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? (obj || new EventDependencyInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

lavaQuestInfo(obj?:LavaQuestInfo):LavaQuestInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? (obj || new LavaQuestInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dynamicOfferAllInfo(obj?:DynamicOfferAllInfo):DynamicOfferAllInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? (obj || new DynamicOfferAllInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

seasonalCardCollectionInfo(obj?:SeasonalCardCollectionInfo):SeasonalCardCollectionInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? (obj || new SeasonalCardCollectionInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

teamTournamentInfo(obj?:TeamTournamentInfo):TeamTournamentInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? (obj || new TeamTournamentInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

missionPursuitInfo(obj?:MissionPursuitInfo):MissionPursuitInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? (obj || new MissionPursuitInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

seasonalCardPackOfferEventInfo(obj?:SeasonalCardPackOfferEventInfo):SeasonalCardPackOfferEventInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? (obj || new SeasonalCardPackOfferEventInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

missionControlInfo(obj?:MissionControlInfo):MissionControlInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? (obj || new MissionControlInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

trainJourneyInfo(obj?:TrainJourneyInfo):TrainJourneyInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? (obj || new TrainJourneyInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

oceanOdysseyInfo(obj?:OceanOdysseyInfo):OceanOdysseyInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? (obj || new OceanOdysseyInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

goldenOffersInfo(obj?:GoldenOffersInfo):GoldenOffersInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? (obj || new GoldenOffersInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

serverDailyLightningRushInfo(obj?:DailyLightningRushInfo):DailyLightningRushInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? (obj || new DailyLightningRushInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

newAbData(obj?:NewABData):NewABData|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? (obj || new NewABData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

puzzleBreakInfo(obj?:PuzzleBreakInfo):PuzzleBreakInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? (obj || new PuzzleBreakInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

newRoyalPassInfo(obj?:NewRoyalPassInfo):NewRoyalPassInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? (obj || new NewRoyalPassInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startUpdateUserProgressResponse(builder:flatbuffers.Builder) {
  builder.startObject(39);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addUserProgress(builder:flatbuffers.Builder, userProgressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, userProgressOffset, 0);
}

static addTeamExist(builder:flatbuffers.Builder, teamExist:boolean) {
  builder.addFieldInt8(2, +teamExist, +false);
}

static addLeagueRank(builder:flatbuffers.Builder, leagueRank:number) {
  builder.addFieldInt32(3, leagueRank, 0);
}

static addLeagueRemainingTime(builder:flatbuffers.Builder, leagueRemainingTime:bigint) {
  builder.addFieldInt64(4, leagueRemainingTime, BigInt('0'));
}

static addKingsCupInfo(builder:flatbuffers.Builder, kingsCupInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, kingsCupInfoOffset, 0);
}

static addTeamBattleInfo(builder:flatbuffers.Builder, teamBattleInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, teamBattleInfoOffset, 0);
}

static addMadnessEventInfo(builder:flatbuffers.Builder, madnessEventInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, madnessEventInfoOffset, 0);
}

static addLogData(builder:flatbuffers.Builder, logDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, logDataOffset, 0);
}

static addLadderOfferInfo(builder:flatbuffers.Builder, ladderOfferInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, ladderOfferInfoOffset, 0);
}

static addRoyalPassInfo(builder:flatbuffers.Builder, royalPassInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, royalPassInfoOffset, 0);
}

static addSkyRaceInfo(builder:flatbuffers.Builder, skyRaceInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, skyRaceInfoOffset, 0);
}

static addSpecialOfferEventInfo(builder:flatbuffers.Builder, specialOfferEventInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, specialOfferEventInfoOffset, 0);
}

static addPinataPartyInfo(builder:flatbuffers.Builder, pinataPartyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, pinataPartyInfoOffset, 0);
}

static addTeamTreasureInfo(builder:flatbuffers.Builder, teamTreasureInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, teamTreasureInfoOffset, 0);
}

static addTeamGiftOfferInfo(builder:flatbuffers.Builder, teamGiftOfferInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, teamGiftOfferInfoOffset, 0);
}

static addLightningRushInfo(builder:flatbuffers.Builder, lightningRushInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, lightningRushInfoOffset, 0);
}

static addSpaceMissionInfo(builder:flatbuffers.Builder, spaceMissionInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, spaceMissionInfoOffset, 0);
}

static addBalloonRiseInfo(builder:flatbuffers.Builder, balloonRiseInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, balloonRiseInfoOffset, 0);
}

static addHiddenTempleInfo(builder:flatbuffers.Builder, hiddenTempleInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, hiddenTempleInfoOffset, 0);
}

static addMagicCauldronInfo(builder:flatbuffers.Builder, magicCauldronInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, magicCauldronInfoOffset, 0);
}

static addDragonNestInfo(builder:flatbuffers.Builder, dragonNestInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, dragonNestInfoOffset, 0);
}

static addArcheryArenaInfo(builder:flatbuffers.Builder, archeryArenaInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, archeryArenaInfoOffset, 0);
}

static addDukesFortuneInfo(builder:flatbuffers.Builder, dukesFortuneInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, dukesFortuneInfoOffset, 0);
}

static addEventDependencyInfo(builder:flatbuffers.Builder, eventDependencyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, eventDependencyInfoOffset, 0);
}

static addLavaQuestInfo(builder:flatbuffers.Builder, lavaQuestInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, lavaQuestInfoOffset, 0);
}

static addDynamicOfferAllInfo(builder:flatbuffers.Builder, dynamicOfferAllInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, dynamicOfferAllInfoOffset, 0);
}

static addSeasonalCardCollectionInfo(builder:flatbuffers.Builder, seasonalCardCollectionInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, seasonalCardCollectionInfoOffset, 0);
}

static addTeamTournamentInfo(builder:flatbuffers.Builder, teamTournamentInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, teamTournamentInfoOffset, 0);
}

static addMissionPursuitInfo(builder:flatbuffers.Builder, missionPursuitInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, missionPursuitInfoOffset, 0);
}

static addSeasonalCardPackOfferEventInfo(builder:flatbuffers.Builder, seasonalCardPackOfferEventInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, seasonalCardPackOfferEventInfoOffset, 0);
}

static addMissionControlInfo(builder:flatbuffers.Builder, missionControlInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, missionControlInfoOffset, 0);
}

static addTrainJourneyInfo(builder:flatbuffers.Builder, trainJourneyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, trainJourneyInfoOffset, 0);
}

static addOceanOdysseyInfo(builder:flatbuffers.Builder, oceanOdysseyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, oceanOdysseyInfoOffset, 0);
}

static addGoldenOffersInfo(builder:flatbuffers.Builder, goldenOffersInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, goldenOffersInfoOffset, 0);
}

static addServerDailyLightningRushInfo(builder:flatbuffers.Builder, serverDailyLightningRushInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, serverDailyLightningRushInfoOffset, 0);
}

static addNewAbData(builder:flatbuffers.Builder, newAbDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, newAbDataOffset, 0);
}

static addPuzzleBreakInfo(builder:flatbuffers.Builder, puzzleBreakInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, puzzleBreakInfoOffset, 0);
}

static addNewRoyalPassInfo(builder:flatbuffers.Builder, newRoyalPassInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, newRoyalPassInfoOffset, 0);
}

static endUpdateUserProgressResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
