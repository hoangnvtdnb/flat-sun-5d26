// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class LeagueConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LeagueConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLeagueConfig(bb:flatbuffers.ByteBuffer, obj?:LeagueConfig):LeagueConfig {
  return (obj || new LeagueConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLeagueConfig(bb:flatbuffers.ByteBuffer, obj?:LeagueConfig):LeagueConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LeagueConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

leagueId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

levels():string|null
levels(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
levels(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewards():string|null
rewards(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rewards(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

remainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startLeagueConfig(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addLeagueId(builder:flatbuffers.Builder, leagueId:number) {
  builder.addFieldInt32(0, leagueId, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(1, version, 0);
}

static addLevels(builder:flatbuffers.Builder, levelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, levelsOffset, 0);
}

static addRewards(builder:flatbuffers.Builder, rewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rewardsOffset, 0);
}

static addRemainingTime(builder:flatbuffers.Builder, remainingTime:bigint) {
  builder.addFieldInt64(4, remainingTime, BigInt('0'));
}

static endLeagueConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLeagueConfig(builder:flatbuffers.Builder, leagueId:number, version:number, levelsOffset:flatbuffers.Offset, rewardsOffset:flatbuffers.Offset, remainingTime:bigint):flatbuffers.Offset {
  LeagueConfig.startLeagueConfig(builder);
  LeagueConfig.addLeagueId(builder, leagueId);
  LeagueConfig.addVersion(builder, version);
  LeagueConfig.addLevels(builder, levelsOffset);
  LeagueConfig.addRewards(builder, rewardsOffset);
  LeagueConfig.addRemainingTime(builder, remainingTime);
  return LeagueConfig.endLeagueConfig(builder);
}
}
