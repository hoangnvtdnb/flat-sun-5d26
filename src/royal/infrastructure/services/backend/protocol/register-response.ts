// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ABTestContent } from '../../../../../royal/infrastructure/services/backend/protocol/abtest-content.js';
import { BadWordsData } from '../../../../../royal/infrastructure/services/backend/protocol/bad-words-data.js';
import { NewABData } from '../../../../../royal/infrastructure/services/backend/protocol/new-abdata.js';
import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';
import { UserLoginType } from '../../../../../royal/infrastructure/services/backend/protocol/user-login-type.js';
import { UserProgress } from '../../../../../royal/infrastructure/services/backend/protocol/user-progress.js';


export class RegisterResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RegisterResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRegisterResponse(bb:flatbuffers.ByteBuffer, obj?:RegisterResponse):RegisterResponse {
  return (obj || new RegisterResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRegisterResponse(bb:flatbuffers.ByteBuffer, obj?:RegisterResponse):RegisterResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RegisterResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

userLoginType():UserLoginType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : UserLoginType.NewUser;
}

userToken():string|null
userToken(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userToken(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

userProgress(obj?:UserProgress):UserProgress|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new UserProgress()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

state():string|null
state(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
state(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

city():string|null
city(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
city(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

badWordsFilter(obj?:BadWordsData):BadWordsData|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new BadWordsData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

abTestData():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestContent(obj?:ABTestContent):ABTestContent|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new ABTestContent()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

abTestUpdateData():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestData2():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestUpdateData2():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

installDate():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestData3():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestUpdateData3():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

revenueSegment():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

newAbData(obj?:NewABData):NewABData|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? (obj || new NewABData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

revenueSegmentVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startRegisterResponse(builder:flatbuffers.Builder) {
  builder.startObject(20);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addUserLoginType(builder:flatbuffers.Builder, userLoginType:UserLoginType) {
  builder.addFieldInt8(1, userLoginType, UserLoginType.NewUser);
}

static addUserToken(builder:flatbuffers.Builder, userTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, userTokenOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addUserProgress(builder:flatbuffers.Builder, userProgressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, userProgressOffset, 0);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, countryOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, stateOffset, 0);
}

static addCity(builder:flatbuffers.Builder, cityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, cityOffset, 0);
}

static addBadWordsFilter(builder:flatbuffers.Builder, badWordsFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, badWordsFilterOffset, 0);
}

static addAbTestData(builder:flatbuffers.Builder, abTestData:bigint) {
  builder.addFieldInt64(9, abTestData, BigInt('0'));
}

static addAbTestContent(builder:flatbuffers.Builder, abTestContentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, abTestContentOffset, 0);
}

static addAbTestUpdateData(builder:flatbuffers.Builder, abTestUpdateData:bigint) {
  builder.addFieldInt64(11, abTestUpdateData, BigInt('0'));
}

static addAbTestData2(builder:flatbuffers.Builder, abTestData2:bigint) {
  builder.addFieldInt64(12, abTestData2, BigInt('0'));
}

static addAbTestUpdateData2(builder:flatbuffers.Builder, abTestUpdateData2:bigint) {
  builder.addFieldInt64(13, abTestUpdateData2, BigInt('0'));
}

static addInstallDate(builder:flatbuffers.Builder, installDate:bigint) {
  builder.addFieldInt64(14, installDate, BigInt('0'));
}

static addAbTestData3(builder:flatbuffers.Builder, abTestData3:bigint) {
  builder.addFieldInt64(15, abTestData3, BigInt('0'));
}

static addAbTestUpdateData3(builder:flatbuffers.Builder, abTestUpdateData3:bigint) {
  builder.addFieldInt64(16, abTestUpdateData3, BigInt('0'));
}

static addRevenueSegment(builder:flatbuffers.Builder, revenueSegment:number) {
  builder.addFieldInt32(17, revenueSegment, 0);
}

static addNewAbData(builder:flatbuffers.Builder, newAbDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, newAbDataOffset, 0);
}

static addRevenueSegmentVersion(builder:flatbuffers.Builder, revenueSegmentVersion:number) {
  builder.addFieldInt32(19, revenueSegmentVersion, 0);
}

static endRegisterResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
