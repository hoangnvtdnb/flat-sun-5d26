// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { UpdateDailyLightningRushScoreFailReason } from '../../../../../royal/infrastructure/services/backend/protocol/update-daily-lightning-rush-score-fail-reason.js';


export class UpdateDailyLightningRushScoreResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateDailyLightningRushScoreResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateDailyLightningRushScoreResponse(bb:flatbuffers.ByteBuffer, obj?:UpdateDailyLightningRushScoreResponse):UpdateDailyLightningRushScoreResponse {
  return (obj || new UpdateDailyLightningRushScoreResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateDailyLightningRushScoreResponse(bb:flatbuffers.ByteBuffer, obj?:UpdateDailyLightningRushScoreResponse):UpdateDailyLightningRushScoreResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateDailyLightningRushScoreResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

failReason():UpdateDailyLightningRushScoreFailReason {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : UpdateDailyLightningRushScoreFailReason.None;
}

static startUpdateDailyLightningRushScoreResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFailReason(builder:flatbuffers.Builder, failReason:UpdateDailyLightningRushScoreFailReason) {
  builder.addFieldInt8(0, failReason, UpdateDailyLightningRushScoreFailReason.None);
}

static endUpdateDailyLightningRushScoreResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateDailyLightningRushScoreResponse(builder:flatbuffers.Builder, failReason:UpdateDailyLightningRushScoreFailReason):flatbuffers.Offset {
  UpdateDailyLightningRushScoreResponse.startUpdateDailyLightningRushScoreResponse(builder);
  UpdateDailyLightningRushScoreResponse.addFailReason(builder, failReason);
  return UpdateDailyLightningRushScoreResponse.endUpdateDailyLightningRushScoreResponse(builder);
}
}
