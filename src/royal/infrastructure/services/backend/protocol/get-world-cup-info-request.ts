// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { WorldCupStage } from '../../../../../royal/infrastructure/services/backend/protocol/world-cup-stage.js';


export class GetWorldCupInfoRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetWorldCupInfoRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetWorldCupInfoRequest(bb:flatbuffers.ByteBuffer, obj?:GetWorldCupInfoRequest):GetWorldCupInfoRequest {
  return (obj || new GetWorldCupInfoRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetWorldCupInfoRequest(bb:flatbuffers.ByteBuffer, obj?:GetWorldCupInfoRequest):GetWorldCupInfoRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetWorldCupInfoRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

userStage():WorldCupStage {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WorldCupStage.Upcoming;
}

country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

configVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

socialLoggedIn():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startGetWorldCupInfoRequest(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addUserEventId(builder:flatbuffers.Builder, userEventId:number) {
  builder.addFieldInt32(0, userEventId, 0);
}

static addUserStage(builder:flatbuffers.Builder, userStage:WorldCupStage) {
  builder.addFieldInt8(1, userStage, WorldCupStage.Upcoming);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, countryOffset, 0);
}

static addConfigVersion(builder:flatbuffers.Builder, configVersion:number) {
  builder.addFieldInt32(3, configVersion, 0);
}

static addSocialLoggedIn(builder:flatbuffers.Builder, socialLoggedIn:boolean) {
  builder.addFieldInt8(4, +socialLoggedIn, +false);
}

static endGetWorldCupInfoRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetWorldCupInfoRequest(builder:flatbuffers.Builder, userEventId:number, userStage:WorldCupStage, countryOffset:flatbuffers.Offset, configVersion:number, socialLoggedIn:boolean):flatbuffers.Offset {
  GetWorldCupInfoRequest.startGetWorldCupInfoRequest(builder);
  GetWorldCupInfoRequest.addUserEventId(builder, userEventId);
  GetWorldCupInfoRequest.addUserStage(builder, userStage);
  GetWorldCupInfoRequest.addCountry(builder, countryOffset);
  GetWorldCupInfoRequest.addConfigVersion(builder, configVersion);
  GetWorldCupInfoRequest.addSocialLoggedIn(builder, socialLoggedIn);
  return GetWorldCupInfoRequest.endGetWorldCupInfoRequest(builder);
}
}
