// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CardCollectionSetProgress } from '../../../../../royal/infrastructure/services/backend/protocol/card-collection-set-progress.js';


export class CardCollectionProgress {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CardCollectionProgress {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCardCollectionProgress(bb:flatbuffers.ByteBuffer, obj?:CardCollectionProgress):CardCollectionProgress {
  return (obj || new CardCollectionProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCardCollectionProgress(bb:flatbuffers.ByteBuffer, obj?:CardCollectionProgress):CardCollectionProgress {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CardCollectionProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sets(index: number, obj?:CardCollectionSetProgress):CardCollectionSetProgress|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CardCollectionSetProgress()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

setsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

wildCards():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tokens():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startCardCollectionProgress(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSets(builder:flatbuffers.Builder, setsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, setsOffset, 0);
}

static createSetsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSetsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWildCards(builder:flatbuffers.Builder, wildCards:number) {
  builder.addFieldInt32(1, wildCards, 0);
}

static addTokens(builder:flatbuffers.Builder, tokens:number) {
  builder.addFieldInt32(2, tokens, 0);
}

static endCardCollectionProgress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCardCollectionProgress(builder:flatbuffers.Builder, setsOffset:flatbuffers.Offset, wildCards:number, tokens:number):flatbuffers.Offset {
  CardCollectionProgress.startCardCollectionProgress(builder);
  CardCollectionProgress.addSets(builder, setsOffset);
  CardCollectionProgress.addWildCards(builder, wildCards);
  CardCollectionProgress.addTokens(builder, tokens);
  return CardCollectionProgress.endCardCollectionProgress(builder);
}
}
