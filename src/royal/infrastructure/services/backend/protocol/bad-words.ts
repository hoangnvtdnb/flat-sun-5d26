// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class BadWords {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BadWords {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBadWords(bb:flatbuffers.ByteBuffer, obj?:BadWords):BadWords {
  return (obj || new BadWords()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBadWords(bb:flatbuffers.ByteBuffer, obj?:BadWords):BadWords {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BadWords()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

language():string|null
language(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
language(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

regex():string|null
regex(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
regex(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startBadWords(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLanguage(builder:flatbuffers.Builder, languageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, languageOffset, 0);
}

static addRegex(builder:flatbuffers.Builder, regexOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, regexOffset, 0);
}

static endBadWords(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBadWords(builder:flatbuffers.Builder, languageOffset:flatbuffers.Offset, regexOffset:flatbuffers.Offset):flatbuffers.Offset {
  BadWords.startBadWords(builder);
  BadWords.addLanguage(builder, languageOffset);
  BadWords.addRegex(builder, regexOffset);
  return BadWords.endBadWords(builder);
}
}
