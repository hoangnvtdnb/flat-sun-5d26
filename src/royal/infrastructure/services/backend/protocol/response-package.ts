// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ResponseType, unionToResponseType, unionListToResponseType } from '../../../../../royal/infrastructure/services/backend/protocol/response-type.js';


export class ResponsePackage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponsePackage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponsePackage(bb:flatbuffers.ByteBuffer, obj?:ResponsePackage):ResponsePackage {
  return (obj || new ResponsePackage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponsePackage(bb:flatbuffers.ByteBuffer, obj?:ResponsePackage):ResponsePackage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponsePackage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

responsesType(index: number):ResponseType|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

responsesTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

responsesTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

responses(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

responsesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startResponsePackage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addUserId(builder:flatbuffers.Builder, userId:bigint) {
  builder.addFieldInt64(0, userId, BigInt('0'));
}

static addResponsesType(builder:flatbuffers.Builder, responsesTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, responsesTypeOffset, 0);
}

static createResponsesTypeVector(builder:flatbuffers.Builder, data:ResponseType[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startResponsesTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addResponses(builder:flatbuffers.Builder, responsesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, responsesOffset, 0);
}

static createResponsesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startResponsesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endResponsePackage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResponsePackage(builder:flatbuffers.Builder, userId:bigint, responsesTypeOffset:flatbuffers.Offset, responsesOffset:flatbuffers.Offset):flatbuffers.Offset {
  ResponsePackage.startResponsePackage(builder);
  ResponsePackage.addUserId(builder, userId);
  ResponsePackage.addResponsesType(builder, responsesTypeOffset);
  ResponsePackage.addResponses(builder, responsesOffset);
  return ResponsePackage.endResponsePackage(builder);
}
}
