// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class TeamTournamentInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TeamTournamentInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTeamTournamentInfo(bb:flatbuffers.ByteBuffer, obj?:TeamTournamentInfo):TeamTournamentInfo {
  return (obj || new TeamTournamentInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTeamTournamentInfo(bb:flatbuffers.ByteBuffer, obj?:TeamTournamentInfo):TeamTournamentInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TeamTournamentInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

remainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

configVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

config():string|null
config(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
config(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTeamTournamentInfo(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addEventId(builder:flatbuffers.Builder, eventId:number) {
  builder.addFieldInt32(0, eventId, 0);
}

static addRemainingTime(builder:flatbuffers.Builder, remainingTime:bigint) {
  builder.addFieldInt64(1, remainingTime, BigInt('0'));
}

static addConfigVersion(builder:flatbuffers.Builder, configVersion:number) {
  builder.addFieldInt32(2, configVersion, 0);
}

static addConfig(builder:flatbuffers.Builder, configOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, configOffset, 0);
}

static endTeamTournamentInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTeamTournamentInfo(builder:flatbuffers.Builder, eventId:number, remainingTime:bigint, configVersion:number, configOffset:flatbuffers.Offset):flatbuffers.Offset {
  TeamTournamentInfo.startTeamTournamentInfo(builder);
  TeamTournamentInfo.addEventId(builder, eventId);
  TeamTournamentInfo.addRemainingTime(builder, remainingTime);
  TeamTournamentInfo.addConfigVersion(builder, configVersion);
  TeamTournamentInfo.addConfig(builder, configOffset);
  return TeamTournamentInfo.endTeamTournamentInfo(builder);
}
}
