// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GameReward } from '../../../../../royal/infrastructure/services/backend/protocol/game-reward.js';
import { MessageType, unionToMessageType, unionListToMessageType } from '../../../../../royal/infrastructure/services/backend/protocol/message-type.js';
import { SystemMessageType } from '../../../../../royal/infrastructure/services/backend/protocol/system-message-type.js';


export class SystemMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SystemMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSystemMessage(bb:flatbuffers.ByteBuffer, obj?:SystemMessage):SystemMessage {
  return (obj || new SystemMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSystemMessage(bb:flatbuffers.ByteBuffer, obj?:SystemMessage):SystemMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SystemMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

type():SystemMessageType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SystemMessageType.NONE;
}

rewards(index: number, obj?:GameReward):GameReward|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new GameReward()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rewardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

messagesType(index: number):MessageType|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

messagesTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

messagesTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

messages(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

messagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSystemMessage(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addType(builder:flatbuffers.Builder, type:SystemMessageType) {
  builder.addFieldInt8(1, type, SystemMessageType.NONE);
}

static addRewards(builder:flatbuffers.Builder, rewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rewardsOffset, 0);
}

static createRewardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRewardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMessagesType(builder:flatbuffers.Builder, messagesTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, messagesTypeOffset, 0);
}

static createMessagesTypeVector(builder:flatbuffers.Builder, data:MessageType[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startMessagesTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, messagesOffset, 0);
}

static createMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSystemMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSystemMessage(builder:flatbuffers.Builder, id:number, type:SystemMessageType, rewardsOffset:flatbuffers.Offset, messagesTypeOffset:flatbuffers.Offset, messagesOffset:flatbuffers.Offset):flatbuffers.Offset {
  SystemMessage.startSystemMessage(builder);
  SystemMessage.addId(builder, id);
  SystemMessage.addType(builder, type);
  SystemMessage.addRewards(builder, rewardsOffset);
  SystemMessage.addMessagesType(builder, messagesTypeOffset);
  SystemMessage.addMessages(builder, messagesOffset);
  return SystemMessage.endSystemMessage(builder);
}
}
