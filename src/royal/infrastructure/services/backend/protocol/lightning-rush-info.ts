// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LightningRushUser } from '../../../../../royal/infrastructure/services/backend/protocol/lightning-rush-user.js';


export class LightningRushInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LightningRushInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLightningRushInfo(bb:flatbuffers.ByteBuffer, obj?:LightningRushInfo):LightningRushInfo {
  return (obj || new LightningRushInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLightningRushInfo(bb:flatbuffers.ByteBuffer, obj?:LightningRushInfo):LightningRushInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LightningRushInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

serverEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

localStartDate():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

localEndDate():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

userEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enterDay():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

groupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

remainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

duration():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

users(index: number, obj?:LightningRushUser):LightningRushUser|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new LightningRushUser()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

usersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

eventDays():string|null
eventDays(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eventDays(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

notificationDays():string|null
notificationDays(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notificationDays(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLightningRushInfo(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addServerEventId(builder:flatbuffers.Builder, serverEventId:number) {
  builder.addFieldInt32(0, serverEventId, 0);
}

static addLocalStartDate(builder:flatbuffers.Builder, localStartDate:bigint) {
  builder.addFieldInt64(1, localStartDate, BigInt('0'));
}

static addLocalEndDate(builder:flatbuffers.Builder, localEndDate:bigint) {
  builder.addFieldInt64(2, localEndDate, BigInt('0'));
}

static addUserEventId(builder:flatbuffers.Builder, userEventId:number) {
  builder.addFieldInt32(3, userEventId, 0);
}

static addEnterDay(builder:flatbuffers.Builder, enterDay:number) {
  builder.addFieldInt32(4, enterDay, 0);
}

static addGroupId(builder:flatbuffers.Builder, groupId:bigint) {
  builder.addFieldInt64(5, groupId, BigInt('0'));
}

static addRemainingTime(builder:flatbuffers.Builder, remainingTime:bigint) {
  builder.addFieldInt64(6, remainingTime, BigInt('0'));
}

static addDuration(builder:flatbuffers.Builder, duration:number) {
  builder.addFieldInt32(7, duration, 0);
}

static addUsers(builder:flatbuffers.Builder, usersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, usersOffset, 0);
}

static createUsersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUsersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEventDays(builder:flatbuffers.Builder, eventDaysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, eventDaysOffset, 0);
}

static addNotificationDays(builder:flatbuffers.Builder, notificationDaysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, notificationDaysOffset, 0);
}

static endLightningRushInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLightningRushInfo(builder:flatbuffers.Builder, serverEventId:number, localStartDate:bigint, localEndDate:bigint, userEventId:number, enterDay:number, groupId:bigint, remainingTime:bigint, duration:number, usersOffset:flatbuffers.Offset, eventDaysOffset:flatbuffers.Offset, notificationDaysOffset:flatbuffers.Offset):flatbuffers.Offset {
  LightningRushInfo.startLightningRushInfo(builder);
  LightningRushInfo.addServerEventId(builder, serverEventId);
  LightningRushInfo.addLocalStartDate(builder, localStartDate);
  LightningRushInfo.addLocalEndDate(builder, localEndDate);
  LightningRushInfo.addUserEventId(builder, userEventId);
  LightningRushInfo.addEnterDay(builder, enterDay);
  LightningRushInfo.addGroupId(builder, groupId);
  LightningRushInfo.addRemainingTime(builder, remainingTime);
  LightningRushInfo.addDuration(builder, duration);
  LightningRushInfo.addUsers(builder, usersOffset);
  LightningRushInfo.addEventDays(builder, eventDaysOffset);
  LightningRushInfo.addNotificationDays(builder, notificationDaysOffset);
  return LightningRushInfo.endLightningRushInfo(builder);
}
}
