// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class GetTeamTournamentInfoRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetTeamTournamentInfoRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetTeamTournamentInfoRequest(bb:flatbuffers.ByteBuffer, obj?:GetTeamTournamentInfoRequest):GetTeamTournamentInfoRequest {
  return (obj || new GetTeamTournamentInfoRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetTeamTournamentInfoRequest(bb:flatbuffers.ByteBuffer, obj?:GetTeamTournamentInfoRequest):GetTeamTournamentInfoRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetTeamTournamentInfoRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

groupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

configVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamRank():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

usersHash():string|null
usersHash(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
usersHash(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

eventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startGetTeamTournamentInfoRequest(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addGroupId(builder:flatbuffers.Builder, groupId:bigint) {
  builder.addFieldInt64(0, groupId, BigInt('0'));
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(1, teamId, BigInt('0'));
}

static addConfigVersion(builder:flatbuffers.Builder, configVersion:number) {
  builder.addFieldInt32(2, configVersion, 0);
}

static addTeamRank(builder:flatbuffers.Builder, teamRank:number) {
  builder.addFieldInt32(3, teamRank, 0);
}

static addUsersHash(builder:flatbuffers.Builder, usersHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, usersHashOffset, 0);
}

static addEventId(builder:flatbuffers.Builder, eventId:number) {
  builder.addFieldInt32(5, eventId, 0);
}

static endGetTeamTournamentInfoRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetTeamTournamentInfoRequest(builder:flatbuffers.Builder, groupId:bigint, teamId:bigint, configVersion:number, teamRank:number, usersHashOffset:flatbuffers.Offset, eventId:number):flatbuffers.Offset {
  GetTeamTournamentInfoRequest.startGetTeamTournamentInfoRequest(builder);
  GetTeamTournamentInfoRequest.addGroupId(builder, groupId);
  GetTeamTournamentInfoRequest.addTeamId(builder, teamId);
  GetTeamTournamentInfoRequest.addConfigVersion(builder, configVersion);
  GetTeamTournamentInfoRequest.addTeamRank(builder, teamRank);
  GetTeamTournamentInfoRequest.addUsersHash(builder, usersHashOffset);
  GetTeamTournamentInfoRequest.addEventId(builder, eventId);
  return GetTeamTournamentInfoRequest.endGetTeamTournamentInfoRequest(builder);
}
}
