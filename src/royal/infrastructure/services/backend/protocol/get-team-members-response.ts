// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';
import { TeamMemberInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-member-info.js';


export class GetTeamMembersResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetTeamMembersResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetTeamMembersResponse(bb:flatbuffers.ByteBuffer, obj?:GetTeamMembersResponse):GetTeamMembersResponse {
  return (obj || new GetTeamMembersResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetTeamMembersResponse(bb:flatbuffers.ByteBuffer, obj?:GetTeamMembersResponse):GetTeamMembersResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetTeamMembersResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

members(index: number, obj?:TeamMemberInfo):TeamMemberInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TeamMemberInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

membersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGetTeamMembersResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addMembers(builder:flatbuffers.Builder, membersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, membersOffset, 0);
}

static createMembersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMembersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGetTeamMembersResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetTeamMembersResponse(builder:flatbuffers.Builder, status:ResponseStatusCode, membersOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetTeamMembersResponse.startGetTeamMembersResponse(builder);
  GetTeamMembersResponse.addStatus(builder, status);
  GetTeamMembersResponse.addMembers(builder, membersOffset);
  return GetTeamMembersResponse.endGetTeamMembersResponse(builder);
}
}
