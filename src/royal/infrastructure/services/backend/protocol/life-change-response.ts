// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ChatProfile } from '../../../../../royal/infrastructure/services/backend/protocol/chat-profile.js';
import { UserInfo } from '../../../../../royal/infrastructure/services/backend/protocol/user-info.js';


export class LifeChangeResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LifeChangeResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLifeChangeResponse(bb:flatbuffers.ByteBuffer, obj?:LifeChangeResponse):LifeChangeResponse {
  return (obj || new LifeChangeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLifeChangeResponse(bb:flatbuffers.ByteBuffer, obj?:LifeChangeResponse):LifeChangeResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LifeChangeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userInfo(obj?:UserInfo):UserInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UserInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

helpers(index: number, obj?:UserInfo):UserInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new UserInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

helpersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

consumed(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

consumedLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

time():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

chatProfile(obj?:ChatProfile):ChatProfile|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ChatProfile()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startLifeChangeResponse(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addUserInfo(builder:flatbuffers.Builder, userInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, userInfoOffset, 0);
}

static addHelpers(builder:flatbuffers.Builder, helpersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, helpersOffset, 0);
}

static createHelpersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHelpersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addConsumed(builder:flatbuffers.Builder, consumedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, consumedOffset, 0);
}

static createConsumedVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startConsumedVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addTime(builder:flatbuffers.Builder, time:bigint) {
  builder.addFieldInt64(3, time, BigInt('0'));
}

static addChatProfile(builder:flatbuffers.Builder, chatProfileOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, chatProfileOffset, 0);
}

static endLifeChangeResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
