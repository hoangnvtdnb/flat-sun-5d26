// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DetachUserFromDeviceRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DetachUserFromDeviceRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDetachUserFromDeviceRequest(bb:flatbuffers.ByteBuffer, obj?:DetachUserFromDeviceRequest):DetachUserFromDeviceRequest {
  return (obj || new DetachUserFromDeviceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDetachUserFromDeviceRequest(bb:flatbuffers.ByteBuffer, obj?:DetachUserFromDeviceRequest):DetachUserFromDeviceRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DetachUserFromDeviceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uidToDetach():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

userTokenToDetach():string|null
userTokenToDetach(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userTokenToDetach(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDetachUserFromDeviceRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addUidToDetach(builder:flatbuffers.Builder, uidToDetach:bigint) {
  builder.addFieldInt64(0, uidToDetach, BigInt('0'));
}

static addUserTokenToDetach(builder:flatbuffers.Builder, userTokenToDetachOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, userTokenToDetachOffset, 0);
}

static endDetachUserFromDeviceRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDetachUserFromDeviceRequest(builder:flatbuffers.Builder, uidToDetach:bigint, userTokenToDetachOffset:flatbuffers.Offset):flatbuffers.Offset {
  DetachUserFromDeviceRequest.startDetachUserFromDeviceRequest(builder);
  DetachUserFromDeviceRequest.addUidToDetach(builder, uidToDetach);
  DetachUserFromDeviceRequest.addUserTokenToDetach(builder, userTokenToDetachOffset);
  return DetachUserFromDeviceRequest.endDetachUserFromDeviceRequest(builder);
}
}
