// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RoyalPassUserProgress } from '../../../../../royal/infrastructure/services/backend/protocol/royal-pass-user-progress.js';


export class UpdateInventoryData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateInventoryData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateInventoryData(bb:flatbuffers.ByteBuffer, obj?:UpdateInventoryData):UpdateInventoryData {
  return (obj || new UpdateInventoryData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateInventoryData(bb:flatbuffers.ByteBuffer, obj?:UpdateInventoryData):UpdateInventoryData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateInventoryData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

coins():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stars():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

inbox():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

inGameInventory():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

preLevelInventory():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

chest():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

eventProgress():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

unlimitedRocketEndTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unlimitedTntEndTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unlimitedLightballEndTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

remainingBoosterTimes():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

royalPassUserProgress(obj?:RoyalPassUserProgress):RoyalPassUserProgress|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new RoyalPassUserProgress()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

feature1():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

multiplierEndTimes():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

feature2():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startUpdateInventoryData(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addCoins(builder:flatbuffers.Builder, coins:number) {
  builder.addFieldInt32(0, coins, 0);
}

static addStars(builder:flatbuffers.Builder, stars:number) {
  builder.addFieldInt32(1, stars, 0);
}

static addInbox(builder:flatbuffers.Builder, inbox:number) {
  builder.addFieldInt32(2, inbox, 0);
}

static addInGameInventory(builder:flatbuffers.Builder, inGameInventory:bigint) {
  builder.addFieldInt64(3, inGameInventory, BigInt('0'));
}

static addPreLevelInventory(builder:flatbuffers.Builder, preLevelInventory:bigint) {
  builder.addFieldInt64(4, preLevelInventory, BigInt('0'));
}

static addChest(builder:flatbuffers.Builder, chest:number) {
  builder.addFieldInt32(5, chest, 0);
}

static addEventProgress(builder:flatbuffers.Builder, eventProgress:bigint) {
  builder.addFieldInt64(6, eventProgress, BigInt('0'));
}

static addUnlimitedRocketEndTime(builder:flatbuffers.Builder, unlimitedRocketEndTime:number) {
  builder.addFieldInt32(7, unlimitedRocketEndTime, 0);
}

static addUnlimitedTntEndTime(builder:flatbuffers.Builder, unlimitedTntEndTime:number) {
  builder.addFieldInt32(8, unlimitedTntEndTime, 0);
}

static addUnlimitedLightballEndTime(builder:flatbuffers.Builder, unlimitedLightballEndTime:number) {
  builder.addFieldInt32(9, unlimitedLightballEndTime, 0);
}

static addRemainingBoosterTimes(builder:flatbuffers.Builder, remainingBoosterTimes:bigint) {
  builder.addFieldInt64(10, remainingBoosterTimes, BigInt('0'));
}

static addRoyalPassUserProgress(builder:flatbuffers.Builder, royalPassUserProgressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, royalPassUserProgressOffset, 0);
}

static addFeature1(builder:flatbuffers.Builder, feature1:bigint) {
  builder.addFieldInt64(12, feature1, BigInt('0'));
}

static addMultiplierEndTimes(builder:flatbuffers.Builder, multiplierEndTimes:bigint) {
  builder.addFieldInt64(13, multiplierEndTimes, BigInt('0'));
}

static addFeature2(builder:flatbuffers.Builder, feature2:bigint) {
  builder.addFieldInt64(14, feature2, BigInt('0'));
}

static endUpdateInventoryData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
