// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FriendScore } from '../../../../../royal/infrastructure/services/backend/protocol/friend-score.js';
import { LeaderboardTeamInfo } from '../../../../../royal/infrastructure/services/backend/protocol/leaderboard-team-info.js';
import { LeaderboardUserInfo } from '../../../../../royal/infrastructure/services/backend/protocol/leaderboard-user-info.js';
import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';


export class LeaderboardResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LeaderboardResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLeaderboardResponse(bb:flatbuffers.ByteBuffer, obj?:LeaderboardResponse):LeaderboardResponse {
  return (obj || new LeaderboardResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLeaderboardResponse(bb:flatbuffers.ByteBuffer, obj?:LeaderboardResponse):LeaderboardResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LeaderboardResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

friends(index: number, obj?:FriendScore):FriendScore|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FriendScore()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

friendsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

worldPlayers(index: number, obj?:LeaderboardUserInfo):LeaderboardUserInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new LeaderboardUserInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

worldPlayersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

localPlayers(index: number, obj?:LeaderboardUserInfo):LeaderboardUserInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new LeaderboardUserInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

localPlayersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

worldTeams(index: number, obj?:LeaderboardTeamInfo):LeaderboardTeamInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new LeaderboardTeamInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

worldTeamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

localTeams(index: number, obj?:LeaderboardTeamInfo):LeaderboardTeamInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new LeaderboardTeamInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

localTeamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

countryName():string|null
countryName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLeaderboardResponse(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addFriends(builder:flatbuffers.Builder, friendsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, friendsOffset, 0);
}

static createFriendsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFriendsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWorldPlayers(builder:flatbuffers.Builder, worldPlayersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, worldPlayersOffset, 0);
}

static createWorldPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWorldPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLocalPlayers(builder:flatbuffers.Builder, localPlayersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, localPlayersOffset, 0);
}

static createLocalPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLocalPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWorldTeams(builder:flatbuffers.Builder, worldTeamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, worldTeamsOffset, 0);
}

static createWorldTeamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWorldTeamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLocalTeams(builder:flatbuffers.Builder, localTeamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, localTeamsOffset, 0);
}

static createLocalTeamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLocalTeamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCountryName(builder:flatbuffers.Builder, countryNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, countryNameOffset, 0);
}

static endLeaderboardResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLeaderboardResponse(builder:flatbuffers.Builder, status:ResponseStatusCode, friendsOffset:flatbuffers.Offset, worldPlayersOffset:flatbuffers.Offset, localPlayersOffset:flatbuffers.Offset, worldTeamsOffset:flatbuffers.Offset, localTeamsOffset:flatbuffers.Offset, countryNameOffset:flatbuffers.Offset):flatbuffers.Offset {
  LeaderboardResponse.startLeaderboardResponse(builder);
  LeaderboardResponse.addStatus(builder, status);
  LeaderboardResponse.addFriends(builder, friendsOffset);
  LeaderboardResponse.addWorldPlayers(builder, worldPlayersOffset);
  LeaderboardResponse.addLocalPlayers(builder, localPlayersOffset);
  LeaderboardResponse.addWorldTeams(builder, worldTeamsOffset);
  LeaderboardResponse.addLocalTeams(builder, localTeamsOffset);
  LeaderboardResponse.addCountryName(builder, countryNameOffset);
  return LeaderboardResponse.endLeaderboardResponse(builder);
}
}
