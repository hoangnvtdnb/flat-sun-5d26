// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RequestPlatform } from '../../../../../royal/infrastructure/services/backend/protocol/request-platform.js';


export class AuthenticateRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AuthenticateRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAuthenticateRequest(bb:flatbuffers.ByteBuffer, obj?:AuthenticateRequest):AuthenticateRequest {
  return (obj || new AuthenticateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAuthenticateRequest(bb:flatbuffers.ByteBuffer, obj?:AuthenticateRequest):AuthenticateRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AuthenticateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

token():string|null
token(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
token(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

deviceId():string|null
deviceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
deviceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mayHaveTeam():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

platform():RequestPlatform {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RequestPlatform.DefaultValueFromOldClients;
}

static startAuthenticateRequest(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addUserId(builder:flatbuffers.Builder, userId:bigint) {
  builder.addFieldInt64(0, userId, BigInt('0'));
}

static addToken(builder:flatbuffers.Builder, tokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tokenOffset, 0);
}

static addDeviceId(builder:flatbuffers.Builder, deviceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, deviceIdOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(3, version, 0);
}

static addMayHaveTeam(builder:flatbuffers.Builder, mayHaveTeam:boolean) {
  builder.addFieldInt8(4, +mayHaveTeam, +false);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, nameOffset, 0);
}

static addPlatform(builder:flatbuffers.Builder, platform:RequestPlatform) {
  builder.addFieldInt8(6, platform, RequestPlatform.DefaultValueFromOldClients);
}

static endAuthenticateRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAuthenticateRequest(builder:flatbuffers.Builder, userId:bigint, tokenOffset:flatbuffers.Offset, deviceIdOffset:flatbuffers.Offset, version:number, mayHaveTeam:boolean, nameOffset:flatbuffers.Offset, platform:RequestPlatform):flatbuffers.Offset {
  AuthenticateRequest.startAuthenticateRequest(builder);
  AuthenticateRequest.addUserId(builder, userId);
  AuthenticateRequest.addToken(builder, tokenOffset);
  AuthenticateRequest.addDeviceId(builder, deviceIdOffset);
  AuthenticateRequest.addVersion(builder, version);
  AuthenticateRequest.addMayHaveTeam(builder, mayHaveTeam);
  AuthenticateRequest.addName(builder, nameOffset);
  AuthenticateRequest.addPlatform(builder, platform);
  return AuthenticateRequest.endAuthenticateRequest(builder);
}
}
