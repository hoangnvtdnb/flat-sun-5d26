// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';
import { TeamActivityLevel } from '../../../../../royal/infrastructure/services/backend/protocol/team-activity-level.js';
import { TeamMemberInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-member-info.js';


export class GetTeamInfoResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetTeamInfoResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetTeamInfoResponse(bb:flatbuffers.ByteBuffer, obj?:GetTeamInfoResponse):GetTeamInfoResponse {
  return (obj || new GetTeamInfoResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetTeamInfoResponse(bb:flatbuffers.ByteBuffer, obj?:GetTeamInfoResponse):GetTeamInfoResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetTeamInfoResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

teamName():string|null
teamName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

logo():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

minLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

type():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

activity():TeamActivityLevel {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TeamActivityLevel.High;
}

leader():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

coLeaders(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

coLeadersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

members(index: number, obj?:TeamMemberInfo):TeamMemberInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new TeamMemberInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

membersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

minCrown():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startGetTeamInfoResponse(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(1, teamId, BigInt('0'));
}

static addTeamName(builder:flatbuffers.Builder, teamNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, teamNameOffset, 0);
}

static addLogo(builder:flatbuffers.Builder, logo:number) {
  builder.addFieldInt32(3, logo, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, descriptionOffset, 0);
}

static addMinLevel(builder:flatbuffers.Builder, minLevel:number) {
  builder.addFieldInt32(5, minLevel, 0);
}

static addType(builder:flatbuffers.Builder, type:boolean) {
  builder.addFieldInt8(6, +type, +false);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(7, score, 0);
}

static addActivity(builder:flatbuffers.Builder, activity:TeamActivityLevel) {
  builder.addFieldInt8(8, activity, TeamActivityLevel.High);
}

static addLeader(builder:flatbuffers.Builder, leader:bigint) {
  builder.addFieldInt64(9, leader, BigInt('0'));
}

static addCoLeaders(builder:flatbuffers.Builder, coLeadersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, coLeadersOffset, 0);
}

static createCoLeadersVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startCoLeadersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addMembers(builder:flatbuffers.Builder, membersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, membersOffset, 0);
}

static createMembersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMembersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMinCrown(builder:flatbuffers.Builder, minCrown:number) {
  builder.addFieldInt32(12, minCrown, 0);
}

static endGetTeamInfoResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetTeamInfoResponse(builder:flatbuffers.Builder, status:ResponseStatusCode, teamId:bigint, teamNameOffset:flatbuffers.Offset, logo:number, descriptionOffset:flatbuffers.Offset, minLevel:number, type:boolean, score:number, activity:TeamActivityLevel, leader:bigint, coLeadersOffset:flatbuffers.Offset, membersOffset:flatbuffers.Offset, minCrown:number):flatbuffers.Offset {
  GetTeamInfoResponse.startGetTeamInfoResponse(builder);
  GetTeamInfoResponse.addStatus(builder, status);
  GetTeamInfoResponse.addTeamId(builder, teamId);
  GetTeamInfoResponse.addTeamName(builder, teamNameOffset);
  GetTeamInfoResponse.addLogo(builder, logo);
  GetTeamInfoResponse.addDescription(builder, descriptionOffset);
  GetTeamInfoResponse.addMinLevel(builder, minLevel);
  GetTeamInfoResponse.addType(builder, type);
  GetTeamInfoResponse.addScore(builder, score);
  GetTeamInfoResponse.addActivity(builder, activity);
  GetTeamInfoResponse.addLeader(builder, leader);
  GetTeamInfoResponse.addCoLeaders(builder, coLeadersOffset);
  GetTeamInfoResponse.addMembers(builder, membersOffset);
  GetTeamInfoResponse.addMinCrown(builder, minCrown);
  return GetTeamInfoResponse.endGetTeamInfoResponse(builder);
}
}
