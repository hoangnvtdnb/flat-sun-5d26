// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { EnterEventFailReason } from '../../../../../royal/infrastructure/services/backend/protocol/enter-event-fail-reason.js';
import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';
import { WeeklyLeaderboardUser } from '../../../../../royal/infrastructure/services/backend/protocol/weekly-leaderboard-user.js';


export class EnterWeeklyLeaderboardResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EnterWeeklyLeaderboardResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEnterWeeklyLeaderboardResponse(bb:flatbuffers.ByteBuffer, obj?:EnterWeeklyLeaderboardResponse):EnterWeeklyLeaderboardResponse {
  return (obj || new EnterWeeklyLeaderboardResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEnterWeeklyLeaderboardResponse(bb:flatbuffers.ByteBuffer, obj?:EnterWeeklyLeaderboardResponse):EnterWeeklyLeaderboardResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EnterWeeklyLeaderboardResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

failReason():EnterEventFailReason {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : EnterEventFailReason.None;
}

users(index: number, obj?:WeeklyLeaderboardUser):WeeklyLeaderboardUser|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new WeeklyLeaderboardUser()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

usersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

serverEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

segment():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startEnterWeeklyLeaderboardResponse(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addFailReason(builder:flatbuffers.Builder, failReason:EnterEventFailReason) {
  builder.addFieldInt8(1, failReason, EnterEventFailReason.None);
}

static addUsers(builder:flatbuffers.Builder, usersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, usersOffset, 0);
}

static createUsersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUsersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addServerEventId(builder:flatbuffers.Builder, serverEventId:number) {
  builder.addFieldInt32(3, serverEventId, 0);
}

static addSegment(builder:flatbuffers.Builder, segment:number) {
  builder.addFieldInt32(4, segment, 0);
}

static endEnterWeeklyLeaderboardResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEnterWeeklyLeaderboardResponse(builder:flatbuffers.Builder, status:ResponseStatusCode, failReason:EnterEventFailReason, usersOffset:flatbuffers.Offset, serverEventId:number, segment:number):flatbuffers.Offset {
  EnterWeeklyLeaderboardResponse.startEnterWeeklyLeaderboardResponse(builder);
  EnterWeeklyLeaderboardResponse.addStatus(builder, status);
  EnterWeeklyLeaderboardResponse.addFailReason(builder, failReason);
  EnterWeeklyLeaderboardResponse.addUsers(builder, usersOffset);
  EnterWeeklyLeaderboardResponse.addServerEventId(builder, serverEventId);
  EnterWeeklyLeaderboardResponse.addSegment(builder, segment);
  return EnterWeeklyLeaderboardResponse.endEnterWeeklyLeaderboardResponse(builder);
}
}
