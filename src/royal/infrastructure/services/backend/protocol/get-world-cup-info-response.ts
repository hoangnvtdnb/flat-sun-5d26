// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GetWorldCupInfoResult } from '../../../../../royal/infrastructure/services/backend/protocol/get-world-cup-info-result.js';
import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';
import { StageInfo } from '../../../../../royal/infrastructure/services/backend/protocol/stage-info.js';
import { WorldCupInfo } from '../../../../../royal/infrastructure/services/backend/protocol/world-cup-info.js';


export class GetWorldCupInfoResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetWorldCupInfoResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetWorldCupInfoResponse(bb:flatbuffers.ByteBuffer, obj?:GetWorldCupInfoResponse):GetWorldCupInfoResponse {
  return (obj || new GetWorldCupInfoResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetWorldCupInfoResponse(bb:flatbuffers.ByteBuffer, obj?:GetWorldCupInfoResponse):GetWorldCupInfoResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetWorldCupInfoResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

worldCupServerEventInfo(obj?:WorldCupInfo):WorldCupInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new WorldCupInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

userStageInfoType():StageInfo {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : StageInfo.NONE;
}

configVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

config():string|null
config(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
config(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

result():GetWorldCupInfoResult {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GetWorldCupInfoResult.Success;
}

static startGetWorldCupInfoResponse(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addWorldCupServerEventInfo(builder:flatbuffers.Builder, worldCupServerEventInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, worldCupServerEventInfoOffset, 0);
}

static addUserStageInfoType(builder:flatbuffers.Builder, userStageInfoType:StageInfo) {
  builder.addFieldInt8(1, userStageInfoType, StageInfo.NONE);
}

static addConfigVersion(builder:flatbuffers.Builder, configVersion:number) {
  builder.addFieldInt32(2, configVersion, 0);
}

static addConfig(builder:flatbuffers.Builder, configOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, configOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(4, status, ResponseStatusCode.Success);
}

static addResult(builder:flatbuffers.Builder, result:GetWorldCupInfoResult) {
  builder.addFieldInt8(5, result, GetWorldCupInfoResult.Success);
}

static endGetWorldCupInfoResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetWorldCupInfoResponse(builder:flatbuffers.Builder, worldCupServerEventInfoOffset:flatbuffers.Offset, userStageInfoType:StageInfo, configVersion:number, configOffset:flatbuffers.Offset, status:ResponseStatusCode, result:GetWorldCupInfoResult):flatbuffers.Offset {
  GetWorldCupInfoResponse.startGetWorldCupInfoResponse(builder);
  GetWorldCupInfoResponse.addWorldCupServerEventInfo(builder, worldCupServerEventInfoOffset);
  GetWorldCupInfoResponse.addUserStageInfoType(builder, userStageInfoType);
  GetWorldCupInfoResponse.addConfigVersion(builder, configVersion);
  GetWorldCupInfoResponse.addConfig(builder, configOffset);
  GetWorldCupInfoResponse.addStatus(builder, status);
  GetWorldCupInfoResponse.addResult(builder, result);
  return GetWorldCupInfoResponse.endGetWorldCupInfoResponse(builder);
}
}
