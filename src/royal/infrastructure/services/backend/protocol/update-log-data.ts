// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LogData } from '../../../../../royal/infrastructure/services/backend/protocol/log-data.js';


export class UpdateLogData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateLogData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateLogData(bb:flatbuffers.ByteBuffer, obj?:UpdateLogData):UpdateLogData {
  return (obj || new UpdateLogData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateLogData(bb:flatbuffers.ByteBuffer, obj?:UpdateLogData):UpdateLogData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateLogData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

logData(obj?:LogData):LogData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new LogData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startUpdateLogData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addLogData(builder:flatbuffers.Builder, logDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, logDataOffset, 0);
}

static endUpdateLogData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateLogData(builder:flatbuffers.Builder, logDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  UpdateLogData.startUpdateLogData(builder);
  UpdateLogData.addLogData(builder, logDataOffset);
  return UpdateLogData.endUpdateLogData(builder);
}
}
