// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { StatType } from '../../../../../royal/infrastructure/services/backend/protocol/stat-type.js';


export class StatProgress {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StatProgress {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStatProgress(bb:flatbuffers.ByteBuffer, obj?:StatProgress):StatProgress {
  return (obj || new StatProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStatProgress(bb:flatbuffers.ByteBuffer, obj?:StatProgress):StatProgress {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StatProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():StatType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : StatType.None;
}

value():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startStatProgress(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addId(builder:flatbuffers.Builder, id:StatType) {
  builder.addFieldInt8(0, id, StatType.None);
}

static addValue(builder:flatbuffers.Builder, value:bigint) {
  builder.addFieldInt64(1, value, BigInt('0'));
}

static endStatProgress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStatProgress(builder:flatbuffers.Builder, id:StatType, value:bigint):flatbuffers.Offset {
  StatProgress.startStatProgress(builder);
  StatProgress.addId(builder, id);
  StatProgress.addValue(builder, value);
  return StatProgress.endStatProgress(builder);
}
}
