// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class LeaderboardRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LeaderboardRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLeaderboardRequest(bb:flatbuffers.ByteBuffer, obj?:LeaderboardRequest):LeaderboardRequest {
  return (obj || new LeaderboardRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLeaderboardRequest(bb:flatbuffers.ByteBuffer, obj?:LeaderboardRequest):LeaderboardRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LeaderboardRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

friends(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

friendsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startLeaderboardRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFriends(builder:flatbuffers.Builder, friendsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, friendsOffset, 0);
}

static createFriendsVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startFriendsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static endLeaderboardRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLeaderboardRequest(builder:flatbuffers.Builder, friendsOffset:flatbuffers.Offset):flatbuffers.Offset {
  LeaderboardRequest.startLeaderboardRequest(builder);
  LeaderboardRequest.addFriends(builder, friendsOffset);
  return LeaderboardRequest.endLeaderboardRequest(builder);
}
}
