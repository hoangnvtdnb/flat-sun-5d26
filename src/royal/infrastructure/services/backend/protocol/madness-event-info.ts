// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MadnessEventType } from '../../../../../royal/infrastructure/services/backend/protocol/madness-event-type.js';


export class MadnessEventInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MadnessEventInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMadnessEventInfo(bb:flatbuffers.ByteBuffer, obj?:MadnessEventInfo):MadnessEventInfo {
  return (obj || new MadnessEventInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMadnessEventInfo(bb:flatbuffers.ByteBuffer, obj?:MadnessEventInfo):MadnessEventInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MadnessEventInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

type():MadnessEventType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MadnessEventType.Propeller;
}

remainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

configVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

config1():string|null
config1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
config1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

config2():string|null
config2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
config2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMadnessEventInfo(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addType(builder:flatbuffers.Builder, type:MadnessEventType) {
  builder.addFieldInt8(1, type, MadnessEventType.Propeller);
}

static addRemainingTime(builder:flatbuffers.Builder, remainingTime:bigint) {
  builder.addFieldInt64(2, remainingTime, BigInt('0'));
}

static addConfigVersion(builder:flatbuffers.Builder, configVersion:number) {
  builder.addFieldInt32(3, configVersion, 0);
}

static addConfig1(builder:flatbuffers.Builder, config1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(4, config1Offset, 0);
}

static addConfig2(builder:flatbuffers.Builder, config2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(5, config2Offset, 0);
}

static endMadnessEventInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMadnessEventInfo(builder:flatbuffers.Builder, id:number, type:MadnessEventType, remainingTime:bigint, configVersion:number, config1Offset:flatbuffers.Offset, config2Offset:flatbuffers.Offset):flatbuffers.Offset {
  MadnessEventInfo.startMadnessEventInfo(builder);
  MadnessEventInfo.addId(builder, id);
  MadnessEventInfo.addType(builder, type);
  MadnessEventInfo.addRemainingTime(builder, remainingTime);
  MadnessEventInfo.addConfigVersion(builder, configVersion);
  MadnessEventInfo.addConfig1(builder, config1Offset);
  MadnessEventInfo.addConfig2(builder, config2Offset);
  return MadnessEventInfo.endMadnessEventInfo(builder);
}
}
