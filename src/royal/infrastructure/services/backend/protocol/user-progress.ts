// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ArcheryArenaRefreshInfo } from '../../../../../royal/infrastructure/services/backend/protocol/archery-arena-refresh-info.js';
import { BalloonRiseInfo } from '../../../../../royal/infrastructure/services/backend/protocol/balloon-rise-info.js';
import { ByteArrayKeyValue } from '../../../../../royal/infrastructure/services/backend/protocol/byte-array-key-value.js';
import { CardCollectionProgress } from '../../../../../royal/infrastructure/services/backend/protocol/card-collection-progress.js';
import { DailyLightningRushRefreshInfo } from '../../../../../royal/infrastructure/services/backend/protocol/daily-lightning-rush-refresh-info.js';
import { DragonNestInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dragon-nest-info.js';
import { DukesFortuneInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dukes-fortune-info.js';
import { DynamicOfferAllInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dynamic-offer-all-info.js';
import { EventDependencyInfo } from '../../../../../royal/infrastructure/services/backend/protocol/event-dependency-info.js';
import { GoldenOffersInfo } from '../../../../../royal/infrastructure/services/backend/protocol/golden-offers-info.js';
import { HiddenTempleInfo } from '../../../../../royal/infrastructure/services/backend/protocol/hidden-temple-info.js';
import { KeyValue } from '../../../../../royal/infrastructure/services/backend/protocol/key-value.js';
import { KingsCupInfo } from '../../../../../royal/infrastructure/services/backend/protocol/kings-cup-info.js';
import { LadderOfferInfo } from '../../../../../royal/infrastructure/services/backend/protocol/ladder-offer-info.js';
import { LavaQuestInfo } from '../../../../../royal/infrastructure/services/backend/protocol/lava-quest-info.js';
import { LeagueProgress } from '../../../../../royal/infrastructure/services/backend/protocol/league-progress.js';
import { LightningRushInfo } from '../../../../../royal/infrastructure/services/backend/protocol/lightning-rush-info.js';
import { LogData } from '../../../../../royal/infrastructure/services/backend/protocol/log-data.js';
import { MadnessEventInfo } from '../../../../../royal/infrastructure/services/backend/protocol/madness-event-info.js';
import { MagicCauldronInfo } from '../../../../../royal/infrastructure/services/backend/protocol/magic-cauldron-info.js';
import { MissionControlRefreshInfo } from '../../../../../royal/infrastructure/services/backend/protocol/mission-control-refresh-info.js';
import { MissionPursuitInfo } from '../../../../../royal/infrastructure/services/backend/protocol/mission-pursuit-info.js';
import { NewRoyalPassInfo } from '../../../../../royal/infrastructure/services/backend/protocol/new-royal-pass-info.js';
import { OceanOdysseyInfo } from '../../../../../royal/infrastructure/services/backend/protocol/ocean-odyssey-info.js';
import { PinataPartyInfo } from '../../../../../royal/infrastructure/services/backend/protocol/pinata-party-info.js';
import { ProfileSetting } from '../../../../../royal/infrastructure/services/backend/protocol/profile-setting.js';
import { PurchaseTransactionInfo } from '../../../../../royal/infrastructure/services/backend/protocol/purchase-transaction-info.js';
import { PuzzleBreakInfo } from '../../../../../royal/infrastructure/services/backend/protocol/puzzle-break-info.js';
import { RoyalPassInfo } from '../../../../../royal/infrastructure/services/backend/protocol/royal-pass-info.js';
import { RoyalPassUserProgress } from '../../../../../royal/infrastructure/services/backend/protocol/royal-pass-user-progress.js';
import { SeasonalCardCollectionInfo } from '../../../../../royal/infrastructure/services/backend/protocol/seasonal-card-collection-info.js';
import { SeasonalCardPackOfferEventInfo } from '../../../../../royal/infrastructure/services/backend/protocol/seasonal-card-pack-offer-event-info.js';
import { SegmentOfferInfo } from '../../../../../royal/infrastructure/services/backend/protocol/segment-offer-info.js';
import { SkyRaceInfo } from '../../../../../royal/infrastructure/services/backend/protocol/sky-race-info.js';
import { SpaceMissionInfo } from '../../../../../royal/infrastructure/services/backend/protocol/space-mission-info.js';
import { SpecialOfferEventInfo } from '../../../../../royal/infrastructure/services/backend/protocol/special-offer-event-info.js';
import { TeamBattleInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-battle-info.js';
import { TeamTournamentRefreshInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-tournament-refresh-info.js';
import { TeamTreasureInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-treasure-info.js';
import { TrainJourneyInfo } from '../../../../../royal/infrastructure/services/backend/protocol/train-journey-info.js';
import { UserEventConfigInfo } from '../../../../../royal/infrastructure/services/backend/protocol/user-event-config-info.js';


export class UserProgress {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserProgress {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserProgress(bb:flatbuffers.ByteBuffer, obj?:UserProgress):UserProgress {
  return (obj || new UserProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserProgress(bb:flatbuffers.ByteBuffer, obj?:UserProgress):UserProgress {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

level():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

fullLivesTimeInMs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

unlimitedLivesEndTimeInMs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

userData():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

coins():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stars():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

inbox():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

inGameInventory():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

preLevelInventory():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

areaId():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

areaTasks():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

areaStatus():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

depreciatedLeagueProgress(obj?:LeagueProgress):LeagueProgress|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new LeagueProgress()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

leagueProgress(obj?:LeagueProgress):LeagueProgress|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new LeagueProgress()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

chest():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

kingsCupInfo(obj?:KingsCupInfo):KingsCupInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? (obj || new KingsCupInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

teamBattleInfo(obj?:TeamBattleInfo):TeamBattleInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? (obj || new TeamBattleInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

madnessEventInfo(obj?:MadnessEventInfo):MadnessEventInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? (obj || new MadnessEventInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

eventProgress():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

unlimitedRocketEndTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unlimitedTntEndTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unlimitedLightballEndTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

logData(obj?:LogData):LogData|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? (obj || new LogData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

ladderOfferInfo(obj?:LadderOfferInfo):LadderOfferInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? (obj || new LadderOfferInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

remainingBoosterTimes():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

royalPassInfo(obj?:RoyalPassInfo):RoyalPassInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? (obj || new RoyalPassInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

royalPassUserProgress(obj?:RoyalPassUserProgress):RoyalPassUserProgress|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? (obj || new RoyalPassUserProgress()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

feature1():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

multiplierEndTimes():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

skyRaceInfo(obj?:SkyRaceInfo):SkyRaceInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? (obj || new SkyRaceInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

specialOfferEventInfo(obj?:SpecialOfferEventInfo):SpecialOfferEventInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? (obj || new SpecialOfferEventInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

pinataPartyInfo(obj?:PinataPartyInfo):PinataPartyInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? (obj || new PinataPartyInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

feature2():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

teamTreasureInfo(obj?:TeamTreasureInfo):TeamTreasureInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? (obj || new TeamTreasureInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

deprecatedSegmentOfferInfo(obj?:SegmentOfferInfo):SegmentOfferInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? (obj || new SegmentOfferInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

lightningRushInfo(obj?:LightningRushInfo):LightningRushInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? (obj || new LightningRushInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

keyValueList(index: number, obj?:KeyValue):KeyValue|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? (obj || new KeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

keyValueListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

transactionList(index: number, obj?:PurchaseTransactionInfo):PurchaseTransactionInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? (obj || new PurchaseTransactionInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

transactionListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

collectionProgress(obj?:CardCollectionProgress):CardCollectionProgress|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? (obj || new CardCollectionProgress()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

spaceMissionInfo(obj?:SpaceMissionInfo):SpaceMissionInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? (obj || new SpaceMissionInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

forceRefresh():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

possibleMultipleDevices():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

profileSetting(obj?:ProfileSetting):ProfileSetting|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? (obj || new ProfileSetting()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

hiddenTempleInfo(obj?:HiddenTempleInfo):HiddenTempleInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? (obj || new HiddenTempleInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

byteArrayKeyValueList(index: number, obj?:ByteArrayKeyValue):ByteArrayKeyValue|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? (obj || new ByteArrayKeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

byteArrayKeyValueListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dragonNestInfo(obj?:DragonNestInfo):DragonNestInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? (obj || new DragonNestInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

archeryArenaRefreshInfo(obj?:ArcheryArenaRefreshInfo):ArcheryArenaRefreshInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? (obj || new ArcheryArenaRefreshInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dukesFortuneInfo(obj?:DukesFortuneInfo):DukesFortuneInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? (obj || new DukesFortuneInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

eventDependencyInfo(obj?:EventDependencyInfo):EventDependencyInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? (obj || new EventDependencyInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

lavaQuestInfo(obj?:LavaQuestInfo):LavaQuestInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? (obj || new LavaQuestInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

balloonRiseInfo(obj?:BalloonRiseInfo):BalloonRiseInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? (obj || new BalloonRiseInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

magicCauldronInfo(obj?:MagicCauldronInfo):MagicCauldronInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? (obj || new MagicCauldronInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dynamicOfferAllInfo(obj?:DynamicOfferAllInfo):DynamicOfferAllInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? (obj || new DynamicOfferAllInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

seasonalCardCollectionInfo(obj?:SeasonalCardCollectionInfo):SeasonalCardCollectionInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? (obj || new SeasonalCardCollectionInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

teamTournamentRefreshInfo(obj?:TeamTournamentRefreshInfo):TeamTournamentRefreshInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? (obj || new TeamTournamentRefreshInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

missionPursuitInfo(obj?:MissionPursuitInfo):MissionPursuitInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? (obj || new MissionPursuitInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

seasonalCardPackOfferEventInfo(obj?:SeasonalCardPackOfferEventInfo):SeasonalCardPackOfferEventInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? (obj || new SeasonalCardPackOfferEventInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

missionControlRefreshInfo(obj?:MissionControlRefreshInfo):MissionControlRefreshInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? (obj || new MissionControlRefreshInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

userEventConfigInfo(obj?:UserEventConfigInfo):UserEventConfigInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? (obj || new UserEventConfigInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

trainJourneyInfo(obj?:TrainJourneyInfo):TrainJourneyInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? (obj || new TrainJourneyInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

oceanOdysseyInfo(obj?:OceanOdysseyInfo):OceanOdysseyInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? (obj || new OceanOdysseyInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

goldenOffersInfo(obj?:GoldenOffersInfo):GoldenOffersInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? (obj || new GoldenOffersInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dailyLightningRushRefreshInfo(obj?:DailyLightningRushRefreshInfo):DailyLightningRushRefreshInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? (obj || new DailyLightningRushRefreshInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

puzzleBreakInfo(obj?:PuzzleBreakInfo):PuzzleBreakInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? (obj || new PuzzleBreakInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

newRoyalPassInfo(obj?:NewRoyalPassInfo):NewRoyalPassInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? (obj || new NewRoyalPassInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startUserProgress(builder:flatbuffers.Builder) {
  builder.startObject(67);
}

static addLevel(builder:flatbuffers.Builder, level:number) {
  builder.addFieldInt32(0, level, 0);
}

static addFullLivesTimeInMs(builder:flatbuffers.Builder, fullLivesTimeInMs:bigint) {
  builder.addFieldInt64(1, fullLivesTimeInMs, BigInt('0'));
}

static addUnlimitedLivesEndTimeInMs(builder:flatbuffers.Builder, unlimitedLivesEndTimeInMs:bigint) {
  builder.addFieldInt64(2, unlimitedLivesEndTimeInMs, BigInt('0'));
}

static addUserData(builder:flatbuffers.Builder, userData:bigint) {
  builder.addFieldInt64(3, userData, BigInt('0'));
}

static addCoins(builder:flatbuffers.Builder, coins:number) {
  builder.addFieldInt32(4, coins, 0);
}

static addStars(builder:flatbuffers.Builder, stars:number) {
  builder.addFieldInt32(5, stars, 0);
}

static addInbox(builder:flatbuffers.Builder, inbox:number) {
  builder.addFieldInt32(6, inbox, 0);
}

static addInGameInventory(builder:flatbuffers.Builder, inGameInventory:bigint) {
  builder.addFieldInt64(7, inGameInventory, BigInt('0'));
}

static addPreLevelInventory(builder:flatbuffers.Builder, preLevelInventory:bigint) {
  builder.addFieldInt64(8, preLevelInventory, BigInt('0'));
}

static addAreaId(builder:flatbuffers.Builder, areaId:number) {
  builder.addFieldInt32(9, areaId, 0);
}

static addAreaTasks(builder:flatbuffers.Builder, areaTasks:number) {
  builder.addFieldInt32(10, areaTasks, 0);
}

static addAreaStatus(builder:flatbuffers.Builder, areaStatus:number) {
  builder.addFieldInt32(11, areaStatus, 0);
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(12, teamId, BigInt('0'));
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, nameOffset, 0);
}

static addDepreciatedLeagueProgress(builder:flatbuffers.Builder, depreciatedLeagueProgressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, depreciatedLeagueProgressOffset, 0);
}

static addLeagueProgress(builder:flatbuffers.Builder, leagueProgressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, leagueProgressOffset, 0);
}

static addChest(builder:flatbuffers.Builder, chest:number) {
  builder.addFieldInt32(16, chest, 0);
}

static addKingsCupInfo(builder:flatbuffers.Builder, kingsCupInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, kingsCupInfoOffset, 0);
}

static addTeamBattleInfo(builder:flatbuffers.Builder, teamBattleInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, teamBattleInfoOffset, 0);
}

static addMadnessEventInfo(builder:flatbuffers.Builder, madnessEventInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, madnessEventInfoOffset, 0);
}

static addEventProgress(builder:flatbuffers.Builder, eventProgress:bigint) {
  builder.addFieldInt64(20, eventProgress, BigInt('0'));
}

static addUnlimitedRocketEndTime(builder:flatbuffers.Builder, unlimitedRocketEndTime:number) {
  builder.addFieldInt32(21, unlimitedRocketEndTime, 0);
}

static addUnlimitedTntEndTime(builder:flatbuffers.Builder, unlimitedTntEndTime:number) {
  builder.addFieldInt32(22, unlimitedTntEndTime, 0);
}

static addUnlimitedLightballEndTime(builder:flatbuffers.Builder, unlimitedLightballEndTime:number) {
  builder.addFieldInt32(23, unlimitedLightballEndTime, 0);
}

static addLogData(builder:flatbuffers.Builder, logDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, logDataOffset, 0);
}

static addLadderOfferInfo(builder:flatbuffers.Builder, ladderOfferInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, ladderOfferInfoOffset, 0);
}

static addRemainingBoosterTimes(builder:flatbuffers.Builder, remainingBoosterTimes:bigint) {
  builder.addFieldInt64(26, remainingBoosterTimes, BigInt('0'));
}

static addRoyalPassInfo(builder:flatbuffers.Builder, royalPassInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, royalPassInfoOffset, 0);
}

static addRoyalPassUserProgress(builder:flatbuffers.Builder, royalPassUserProgressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, royalPassUserProgressOffset, 0);
}

static addFeature1(builder:flatbuffers.Builder, feature1:bigint) {
  builder.addFieldInt64(29, feature1, BigInt('0'));
}

static addMultiplierEndTimes(builder:flatbuffers.Builder, multiplierEndTimes:bigint) {
  builder.addFieldInt64(30, multiplierEndTimes, BigInt('0'));
}

static addSkyRaceInfo(builder:flatbuffers.Builder, skyRaceInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, skyRaceInfoOffset, 0);
}

static addSpecialOfferEventInfo(builder:flatbuffers.Builder, specialOfferEventInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, specialOfferEventInfoOffset, 0);
}

static addPinataPartyInfo(builder:flatbuffers.Builder, pinataPartyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, pinataPartyInfoOffset, 0);
}

static addFeature2(builder:flatbuffers.Builder, feature2:bigint) {
  builder.addFieldInt64(34, feature2, BigInt('0'));
}

static addTeamTreasureInfo(builder:flatbuffers.Builder, teamTreasureInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, teamTreasureInfoOffset, 0);
}

static addDeprecatedSegmentOfferInfo(builder:flatbuffers.Builder, deprecatedSegmentOfferInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, deprecatedSegmentOfferInfoOffset, 0);
}

static addLightningRushInfo(builder:flatbuffers.Builder, lightningRushInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, lightningRushInfoOffset, 0);
}

static addKeyValueList(builder:flatbuffers.Builder, keyValueListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, keyValueListOffset, 0);
}

static createKeyValueListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeyValueListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTransactionList(builder:flatbuffers.Builder, transactionListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, transactionListOffset, 0);
}

static createTransactionListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTransactionListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCollectionProgress(builder:flatbuffers.Builder, collectionProgressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, collectionProgressOffset, 0);
}

static addSpaceMissionInfo(builder:flatbuffers.Builder, spaceMissionInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, spaceMissionInfoOffset, 0);
}

static addForceRefresh(builder:flatbuffers.Builder, forceRefresh:boolean) {
  builder.addFieldInt8(42, +forceRefresh, +false);
}

static addPossibleMultipleDevices(builder:flatbuffers.Builder, possibleMultipleDevices:boolean) {
  builder.addFieldInt8(43, +possibleMultipleDevices, +false);
}

static addProfileSetting(builder:flatbuffers.Builder, profileSettingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, profileSettingOffset, 0);
}

static addHiddenTempleInfo(builder:flatbuffers.Builder, hiddenTempleInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, hiddenTempleInfoOffset, 0);
}

static addByteArrayKeyValueList(builder:flatbuffers.Builder, byteArrayKeyValueListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, byteArrayKeyValueListOffset, 0);
}

static createByteArrayKeyValueListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startByteArrayKeyValueListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDragonNestInfo(builder:flatbuffers.Builder, dragonNestInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, dragonNestInfoOffset, 0);
}

static addArcheryArenaRefreshInfo(builder:flatbuffers.Builder, archeryArenaRefreshInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, archeryArenaRefreshInfoOffset, 0);
}

static addDukesFortuneInfo(builder:flatbuffers.Builder, dukesFortuneInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, dukesFortuneInfoOffset, 0);
}

static addEventDependencyInfo(builder:flatbuffers.Builder, eventDependencyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, eventDependencyInfoOffset, 0);
}

static addLavaQuestInfo(builder:flatbuffers.Builder, lavaQuestInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, lavaQuestInfoOffset, 0);
}

static addBalloonRiseInfo(builder:flatbuffers.Builder, balloonRiseInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, balloonRiseInfoOffset, 0);
}

static addMagicCauldronInfo(builder:flatbuffers.Builder, magicCauldronInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, magicCauldronInfoOffset, 0);
}

static addDynamicOfferAllInfo(builder:flatbuffers.Builder, dynamicOfferAllInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, dynamicOfferAllInfoOffset, 0);
}

static addSeasonalCardCollectionInfo(builder:flatbuffers.Builder, seasonalCardCollectionInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, seasonalCardCollectionInfoOffset, 0);
}

static addTeamTournamentRefreshInfo(builder:flatbuffers.Builder, teamTournamentRefreshInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, teamTournamentRefreshInfoOffset, 0);
}

static addMissionPursuitInfo(builder:flatbuffers.Builder, missionPursuitInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, missionPursuitInfoOffset, 0);
}

static addSeasonalCardPackOfferEventInfo(builder:flatbuffers.Builder, seasonalCardPackOfferEventInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, seasonalCardPackOfferEventInfoOffset, 0);
}

static addMissionControlRefreshInfo(builder:flatbuffers.Builder, missionControlRefreshInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, missionControlRefreshInfoOffset, 0);
}

static addUserEventConfigInfo(builder:flatbuffers.Builder, userEventConfigInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, userEventConfigInfoOffset, 0);
}

static addTrainJourneyInfo(builder:flatbuffers.Builder, trainJourneyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, trainJourneyInfoOffset, 0);
}

static addOceanOdysseyInfo(builder:flatbuffers.Builder, oceanOdysseyInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, oceanOdysseyInfoOffset, 0);
}

static addGoldenOffersInfo(builder:flatbuffers.Builder, goldenOffersInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, goldenOffersInfoOffset, 0);
}

static addDailyLightningRushRefreshInfo(builder:flatbuffers.Builder, dailyLightningRushRefreshInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, dailyLightningRushRefreshInfoOffset, 0);
}

static addPuzzleBreakInfo(builder:flatbuffers.Builder, puzzleBreakInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, puzzleBreakInfoOffset, 0);
}

static addNewRoyalPassInfo(builder:flatbuffers.Builder, newRoyalPassInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, newRoyalPassInfoOffset, 0);
}

static endUserProgress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
