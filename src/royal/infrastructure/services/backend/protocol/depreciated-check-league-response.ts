// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';


export class DepreciatedCheckLeagueResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DepreciatedCheckLeagueResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDepreciatedCheckLeagueResponse(bb:flatbuffers.ByteBuffer, obj?:DepreciatedCheckLeagueResponse):DepreciatedCheckLeagueResponse {
  return (obj || new DepreciatedCheckLeagueResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDepreciatedCheckLeagueResponse(bb:flatbuffers.ByteBuffer, obj?:DepreciatedCheckLeagueResponse):DepreciatedCheckLeagueResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DepreciatedCheckLeagueResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

leagueId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startDepreciatedCheckLeagueResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addLeagueId(builder:flatbuffers.Builder, leagueId:number) {
  builder.addFieldInt32(1, leagueId, 0);
}

static endDepreciatedCheckLeagueResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDepreciatedCheckLeagueResponse(builder:flatbuffers.Builder, status:ResponseStatusCode, leagueId:number):flatbuffers.Offset {
  DepreciatedCheckLeagueResponse.startDepreciatedCheckLeagueResponse(builder);
  DepreciatedCheckLeagueResponse.addStatus(builder, status);
  DepreciatedCheckLeagueResponse.addLeagueId(builder, leagueId);
  return DepreciatedCheckLeagueResponse.endDepreciatedCheckLeagueResponse(builder);
}
}
