// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class LavaQuestUserGroupInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LavaQuestUserGroupInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLavaQuestUserGroupInfo(bb:flatbuffers.ByteBuffer, obj?:LavaQuestUserGroupInfo):LavaQuestUserGroupInfo {
  return (obj || new LavaQuestUserGroupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLavaQuestUserGroupInfo(bb:flatbuffers.ByteBuffer, obj?:LavaQuestUserGroupInfo):LavaQuestUserGroupInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LavaQuestUserGroupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

scenario():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

winnerCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stepUserCounts(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

stepUserCountsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stepUserCountsArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

scenarioId():string|null
scenarioId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scenarioId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

deprecatedTeamJoinBanDuration():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startLavaQuestUserGroupInfo(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addScenario(builder:flatbuffers.Builder, scenario:number) {
  builder.addFieldInt32(0, scenario, 0);
}

static addWinnerCount(builder:flatbuffers.Builder, winnerCount:number) {
  builder.addFieldInt32(1, winnerCount, 0);
}

static addStepUserCounts(builder:flatbuffers.Builder, stepUserCountsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stepUserCountsOffset, 0);
}

static createStepUserCountsVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createStepUserCountsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createStepUserCountsVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startStepUserCountsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addScenarioId(builder:flatbuffers.Builder, scenarioIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, scenarioIdOffset, 0);
}

static addDeprecatedTeamJoinBanDuration(builder:flatbuffers.Builder, deprecatedTeamJoinBanDuration:bigint) {
  builder.addFieldInt64(4, deprecatedTeamJoinBanDuration, BigInt('0'));
}

static endLavaQuestUserGroupInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLavaQuestUserGroupInfo(builder:flatbuffers.Builder, scenario:number, winnerCount:number, stepUserCountsOffset:flatbuffers.Offset, scenarioIdOffset:flatbuffers.Offset, deprecatedTeamJoinBanDuration:bigint):flatbuffers.Offset {
  LavaQuestUserGroupInfo.startLavaQuestUserGroupInfo(builder);
  LavaQuestUserGroupInfo.addScenario(builder, scenario);
  LavaQuestUserGroupInfo.addWinnerCount(builder, winnerCount);
  LavaQuestUserGroupInfo.addStepUserCounts(builder, stepUserCountsOffset);
  LavaQuestUserGroupInfo.addScenarioId(builder, scenarioIdOffset);
  LavaQuestUserGroupInfo.addDeprecatedTeamJoinBanDuration(builder, deprecatedTeamJoinBanDuration);
  return LavaQuestUserGroupInfo.endLavaQuestUserGroupInfo(builder);
}
}
