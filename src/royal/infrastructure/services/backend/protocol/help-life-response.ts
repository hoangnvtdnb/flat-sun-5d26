// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';


export class HelpLifeResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HelpLifeResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHelpLifeResponse(bb:flatbuffers.ByteBuffer, obj?:HelpLifeResponse):HelpLifeResponse {
  return (obj || new HelpLifeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHelpLifeResponse(bb:flatbuffers.ByteBuffer, obj?:HelpLifeResponse):HelpLifeResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HelpLifeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

remainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startHelpLifeResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addRemainingTime(builder:flatbuffers.Builder, remainingTime:bigint) {
  builder.addFieldInt64(1, remainingTime, BigInt('0'));
}

static endHelpLifeResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHelpLifeResponse(builder:flatbuffers.Builder, status:ResponseStatusCode, remainingTime:bigint):flatbuffers.Offset {
  HelpLifeResponse.startHelpLifeResponse(builder);
  HelpLifeResponse.addStatus(builder, status);
  HelpLifeResponse.addRemainingTime(builder, remainingTime);
  return HelpLifeResponse.endHelpLifeResponse(builder);
}
}
