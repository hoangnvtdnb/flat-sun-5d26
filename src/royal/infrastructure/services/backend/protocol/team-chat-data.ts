// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ChatMessage } from '../../../../../royal/infrastructure/services/backend/protocol/chat-message.js';
import { DragonNestTeamInviteResponse } from '../../../../../royal/infrastructure/services/backend/protocol/dragon-nest-team-invite-response.js';
import { LifeChangeResponse } from '../../../../../royal/infrastructure/services/backend/protocol/life-change-response.js';
import { PremiumPassDataResponse } from '../../../../../royal/infrastructure/services/backend/protocol/premium-pass-data-response.js';
import { RoyalPassDataResponse } from '../../../../../royal/infrastructure/services/backend/protocol/royal-pass-data-response.js';
import { SeasonalCardCollectionAskCardResponse } from '../../../../../royal/infrastructure/services/backend/protocol/seasonal-card-collection-ask-card-response.js';
import { TeamGiftOfferDataResponse } from '../../../../../royal/infrastructure/services/backend/protocol/team-gift-offer-data-response.js';
import { TrainJourneyLiveTeamInviteReceivedResponse } from '../../../../../royal/infrastructure/services/backend/protocol/train-journey-live-team-invite-received-response.js';


export class TeamChatData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TeamChatData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTeamChatData(bb:flatbuffers.ByteBuffer, obj?:TeamChatData):TeamChatData {
  return (obj || new TeamChatData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTeamChatData(bb:flatbuffers.ByteBuffer, obj?:TeamChatData):TeamChatData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TeamChatData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

teamName():string|null
teamName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

logo():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

leader():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

coLeaders(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

coLeadersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

messages(index: number, obj?:ChatMessage):ChatMessage|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ChatMessage()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

messagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

askLifeRemainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

lifeChanges(index: number, obj?:LifeChangeResponse):LifeChangeResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new LifeChangeResponse()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

lifeChangesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

teamUserCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

helpBanRemainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

joinTeamDate():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

royalPassClaims(index: number, obj?:RoyalPassDataResponse):RoyalPassDataResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new RoyalPassDataResponse()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

royalPassClaimsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

teamGiftOfferClaims(index: number, obj?:TeamGiftOfferDataResponse):TeamGiftOfferDataResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new TeamGiftOfferDataResponse()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

teamGiftOfferClaimsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dragonNestTeamInvites(index: number, obj?:DragonNestTeamInviteResponse):DragonNestTeamInviteResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new DragonNestTeamInviteResponse()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dragonNestTeamInvitesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

seasonalCardCollectionAskCards(index: number, obj?:SeasonalCardCollectionAskCardResponse):SeasonalCardCollectionAskCardResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new SeasonalCardCollectionAskCardResponse()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

seasonalCardCollectionAskCardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

trainJourneyTeamInvites(index: number, obj?:TrainJourneyLiveTeamInviteReceivedResponse):TrainJourneyLiveTeamInviteReceivedResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new TrainJourneyLiveTeamInviteReceivedResponse()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

trainJourneyTeamInvitesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

premiumPassClaims(index: number, obj?:PremiumPassDataResponse):PremiumPassDataResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? (obj || new PremiumPassDataResponse()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

premiumPassClaimsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTeamChatData(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(0, teamId, BigInt('0'));
}

static addTeamName(builder:flatbuffers.Builder, teamNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, teamNameOffset, 0);
}

static addLogo(builder:flatbuffers.Builder, logo:number) {
  builder.addFieldInt32(2, logo, 0);
}

static addLeader(builder:flatbuffers.Builder, leader:bigint) {
  builder.addFieldInt64(3, leader, BigInt('0'));
}

static addCoLeaders(builder:flatbuffers.Builder, coLeadersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, coLeadersOffset, 0);
}

static createCoLeadersVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startCoLeadersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, messagesOffset, 0);
}

static createMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAskLifeRemainingTime(builder:flatbuffers.Builder, askLifeRemainingTime:bigint) {
  builder.addFieldInt64(6, askLifeRemainingTime, BigInt('0'));
}

static addLifeChanges(builder:flatbuffers.Builder, lifeChangesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, lifeChangesOffset, 0);
}

static createLifeChangesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLifeChangesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTeamUserCount(builder:flatbuffers.Builder, teamUserCount:number) {
  builder.addFieldInt32(8, teamUserCount, 0);
}

static addHelpBanRemainingTime(builder:flatbuffers.Builder, helpBanRemainingTime:bigint) {
  builder.addFieldInt64(9, helpBanRemainingTime, BigInt('0'));
}

static addJoinTeamDate(builder:flatbuffers.Builder, joinTeamDate:bigint) {
  builder.addFieldInt64(10, joinTeamDate, BigInt('0'));
}

static addRoyalPassClaims(builder:flatbuffers.Builder, royalPassClaimsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, royalPassClaimsOffset, 0);
}

static createRoyalPassClaimsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRoyalPassClaimsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTeamGiftOfferClaims(builder:flatbuffers.Builder, teamGiftOfferClaimsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, teamGiftOfferClaimsOffset, 0);
}

static createTeamGiftOfferClaimsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTeamGiftOfferClaimsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDragonNestTeamInvites(builder:flatbuffers.Builder, dragonNestTeamInvitesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, dragonNestTeamInvitesOffset, 0);
}

static createDragonNestTeamInvitesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDragonNestTeamInvitesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeasonalCardCollectionAskCards(builder:flatbuffers.Builder, seasonalCardCollectionAskCardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, seasonalCardCollectionAskCardsOffset, 0);
}

static createSeasonalCardCollectionAskCardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeasonalCardCollectionAskCardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrainJourneyTeamInvites(builder:flatbuffers.Builder, trainJourneyTeamInvitesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, trainJourneyTeamInvitesOffset, 0);
}

static createTrainJourneyTeamInvitesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrainJourneyTeamInvitesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPremiumPassClaims(builder:flatbuffers.Builder, premiumPassClaimsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, premiumPassClaimsOffset, 0);
}

static createPremiumPassClaimsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPremiumPassClaimsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTeamChatData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTeamChatData(builder:flatbuffers.Builder, teamId:bigint, teamNameOffset:flatbuffers.Offset, logo:number, leader:bigint, coLeadersOffset:flatbuffers.Offset, messagesOffset:flatbuffers.Offset, askLifeRemainingTime:bigint, lifeChangesOffset:flatbuffers.Offset, teamUserCount:number, helpBanRemainingTime:bigint, joinTeamDate:bigint, royalPassClaimsOffset:flatbuffers.Offset, teamGiftOfferClaimsOffset:flatbuffers.Offset, dragonNestTeamInvitesOffset:flatbuffers.Offset, seasonalCardCollectionAskCardsOffset:flatbuffers.Offset, trainJourneyTeamInvitesOffset:flatbuffers.Offset, premiumPassClaimsOffset:flatbuffers.Offset):flatbuffers.Offset {
  TeamChatData.startTeamChatData(builder);
  TeamChatData.addTeamId(builder, teamId);
  TeamChatData.addTeamName(builder, teamNameOffset);
  TeamChatData.addLogo(builder, logo);
  TeamChatData.addLeader(builder, leader);
  TeamChatData.addCoLeaders(builder, coLeadersOffset);
  TeamChatData.addMessages(builder, messagesOffset);
  TeamChatData.addAskLifeRemainingTime(builder, askLifeRemainingTime);
  TeamChatData.addLifeChanges(builder, lifeChangesOffset);
  TeamChatData.addTeamUserCount(builder, teamUserCount);
  TeamChatData.addHelpBanRemainingTime(builder, helpBanRemainingTime);
  TeamChatData.addJoinTeamDate(builder, joinTeamDate);
  TeamChatData.addRoyalPassClaims(builder, royalPassClaimsOffset);
  TeamChatData.addTeamGiftOfferClaims(builder, teamGiftOfferClaimsOffset);
  TeamChatData.addDragonNestTeamInvites(builder, dragonNestTeamInvitesOffset);
  TeamChatData.addSeasonalCardCollectionAskCards(builder, seasonalCardCollectionAskCardsOffset);
  TeamChatData.addTrainJourneyTeamInvites(builder, trainJourneyTeamInvitesOffset);
  TeamChatData.addPremiumPassClaims(builder, premiumPassClaimsOffset);
  return TeamChatData.endTeamChatData(builder);
}
}
