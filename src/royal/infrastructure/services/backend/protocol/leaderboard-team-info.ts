// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class LeaderboardTeamInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LeaderboardTeamInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLeaderboardTeamInfo(bb:flatbuffers.ByteBuffer, obj?:LeaderboardTeamInfo):LeaderboardTeamInfo {
  return (obj || new LeaderboardTeamInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLeaderboardTeamInfo(bb:flatbuffers.ByteBuffer, obj?:LeaderboardTeamInfo):LeaderboardTeamInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LeaderboardTeamInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

teamName():string|null
teamName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamLogo():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

lastLevelUpdateDate():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

userCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startLeaderboardTeamInfo(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(0, teamId, BigInt('0'));
}

static addTeamName(builder:flatbuffers.Builder, teamNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, teamNameOffset, 0);
}

static addTeamLogo(builder:flatbuffers.Builder, teamLogo:number) {
  builder.addFieldInt32(2, teamLogo, 0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(3, score, 0);
}

static addLastLevelUpdateDate(builder:flatbuffers.Builder, lastLevelUpdateDate:bigint) {
  builder.addFieldInt64(4, lastLevelUpdateDate, BigInt('0'));
}

static addUserCount(builder:flatbuffers.Builder, userCount:number) {
  builder.addFieldInt32(5, userCount, 0);
}

static endLeaderboardTeamInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLeaderboardTeamInfo(builder:flatbuffers.Builder, teamId:bigint, teamNameOffset:flatbuffers.Offset, teamLogo:number, score:number, lastLevelUpdateDate:bigint, userCount:number):flatbuffers.Offset {
  LeaderboardTeamInfo.startLeaderboardTeamInfo(builder);
  LeaderboardTeamInfo.addTeamId(builder, teamId);
  LeaderboardTeamInfo.addTeamName(builder, teamNameOffset);
  LeaderboardTeamInfo.addTeamLogo(builder, teamLogo);
  LeaderboardTeamInfo.addScore(builder, score);
  LeaderboardTeamInfo.addLastLevelUpdateDate(builder, lastLevelUpdateDate);
  LeaderboardTeamInfo.addUserCount(builder, userCount);
  return LeaderboardTeamInfo.endLeaderboardTeamInfo(builder);
}
}
