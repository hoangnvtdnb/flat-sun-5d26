// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ClientSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClientSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClientSettings(bb:flatbuffers.ByteBuffer, obj?:ClientSettings):ClientSettings {
  return (obj || new ClientSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClientSettings(bb:flatbuffers.ByteBuffer, obj?:ClientSettings):ClientSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClientSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

httpClientEnabledCustomDevice():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

httpClientEnabledLowEndDevice():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

commandsWebclientEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

maintenanceWebclientEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

splashRemoteLevelWebclientEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

fileDownloaderSingleThreadEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

bestHttpCacheEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

downloadSchedulingDisabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

unityWebRequestEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

logUploadInThreadEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

muteDetectionEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

iosUnityWebRequestEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

levelStartEndImprovementsEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

refreshRateFixEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

termsAndConditionsVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

appCheckEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

sendFullKeyValueVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

analyticsBlockDisabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startClientSettings(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addUserEventId(builder:flatbuffers.Builder, userEventId:number) {
  builder.addFieldInt32(0, userEventId, 0);
}

static addHttpClientEnabledCustomDevice(builder:flatbuffers.Builder, httpClientEnabledCustomDevice:boolean) {
  builder.addFieldInt8(1, +httpClientEnabledCustomDevice, +false);
}

static addHttpClientEnabledLowEndDevice(builder:flatbuffers.Builder, httpClientEnabledLowEndDevice:boolean) {
  builder.addFieldInt8(2, +httpClientEnabledLowEndDevice, +false);
}

static addCommandsWebclientEnabled(builder:flatbuffers.Builder, commandsWebclientEnabled:boolean) {
  builder.addFieldInt8(3, +commandsWebclientEnabled, +false);
}

static addMaintenanceWebclientEnabled(builder:flatbuffers.Builder, maintenanceWebclientEnabled:boolean) {
  builder.addFieldInt8(4, +maintenanceWebclientEnabled, +false);
}

static addSplashRemoteLevelWebclientEnabled(builder:flatbuffers.Builder, splashRemoteLevelWebclientEnabled:boolean) {
  builder.addFieldInt8(5, +splashRemoteLevelWebclientEnabled, +false);
}

static addFileDownloaderSingleThreadEnabled(builder:flatbuffers.Builder, fileDownloaderSingleThreadEnabled:boolean) {
  builder.addFieldInt8(6, +fileDownloaderSingleThreadEnabled, +false);
}

static addBestHttpCacheEnabled(builder:flatbuffers.Builder, bestHttpCacheEnabled:boolean) {
  builder.addFieldInt8(7, +bestHttpCacheEnabled, +false);
}

static addDownloadSchedulingDisabled(builder:flatbuffers.Builder, downloadSchedulingDisabled:boolean) {
  builder.addFieldInt8(8, +downloadSchedulingDisabled, +false);
}

static addUnityWebRequestEnabled(builder:flatbuffers.Builder, unityWebRequestEnabled:boolean) {
  builder.addFieldInt8(9, +unityWebRequestEnabled, +false);
}

static addLogUploadInThreadEnabled(builder:flatbuffers.Builder, logUploadInThreadEnabled:boolean) {
  builder.addFieldInt8(10, +logUploadInThreadEnabled, +false);
}

static addMuteDetectionEnabled(builder:flatbuffers.Builder, muteDetectionEnabled:boolean) {
  builder.addFieldInt8(11, +muteDetectionEnabled, +false);
}

static addIosUnityWebRequestEnabled(builder:flatbuffers.Builder, iosUnityWebRequestEnabled:boolean) {
  builder.addFieldInt8(12, +iosUnityWebRequestEnabled, +false);
}

static addLevelStartEndImprovementsEnabled(builder:flatbuffers.Builder, levelStartEndImprovementsEnabled:boolean) {
  builder.addFieldInt8(13, +levelStartEndImprovementsEnabled, +false);
}

static addRefreshRateFixEnabled(builder:flatbuffers.Builder, refreshRateFixEnabled:boolean) {
  builder.addFieldInt8(14, +refreshRateFixEnabled, +false);
}

static addTermsAndConditionsVersion(builder:flatbuffers.Builder, termsAndConditionsVersion:number) {
  builder.addFieldInt32(15, termsAndConditionsVersion, 0);
}

static addAppCheckEnabled(builder:flatbuffers.Builder, appCheckEnabled:boolean) {
  builder.addFieldInt8(16, +appCheckEnabled, +false);
}

static addSendFullKeyValueVersion(builder:flatbuffers.Builder, sendFullKeyValueVersion:number) {
  builder.addFieldInt8(17, sendFullKeyValueVersion, 0);
}

static addAnalyticsBlockDisabled(builder:flatbuffers.Builder, analyticsBlockDisabled:boolean) {
  builder.addFieldInt8(18, +analyticsBlockDisabled, +false);
}

static endClientSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createClientSettings(builder:flatbuffers.Builder, userEventId:number, httpClientEnabledCustomDevice:boolean, httpClientEnabledLowEndDevice:boolean, commandsWebclientEnabled:boolean, maintenanceWebclientEnabled:boolean, splashRemoteLevelWebclientEnabled:boolean, fileDownloaderSingleThreadEnabled:boolean, bestHttpCacheEnabled:boolean, downloadSchedulingDisabled:boolean, unityWebRequestEnabled:boolean, logUploadInThreadEnabled:boolean, muteDetectionEnabled:boolean, iosUnityWebRequestEnabled:boolean, levelStartEndImprovementsEnabled:boolean, refreshRateFixEnabled:boolean, termsAndConditionsVersion:number, appCheckEnabled:boolean, sendFullKeyValueVersion:number, analyticsBlockDisabled:boolean):flatbuffers.Offset {
  ClientSettings.startClientSettings(builder);
  ClientSettings.addUserEventId(builder, userEventId);
  ClientSettings.addHttpClientEnabledCustomDevice(builder, httpClientEnabledCustomDevice);
  ClientSettings.addHttpClientEnabledLowEndDevice(builder, httpClientEnabledLowEndDevice);
  ClientSettings.addCommandsWebclientEnabled(builder, commandsWebclientEnabled);
  ClientSettings.addMaintenanceWebclientEnabled(builder, maintenanceWebclientEnabled);
  ClientSettings.addSplashRemoteLevelWebclientEnabled(builder, splashRemoteLevelWebclientEnabled);
  ClientSettings.addFileDownloaderSingleThreadEnabled(builder, fileDownloaderSingleThreadEnabled);
  ClientSettings.addBestHttpCacheEnabled(builder, bestHttpCacheEnabled);
  ClientSettings.addDownloadSchedulingDisabled(builder, downloadSchedulingDisabled);
  ClientSettings.addUnityWebRequestEnabled(builder, unityWebRequestEnabled);
  ClientSettings.addLogUploadInThreadEnabled(builder, logUploadInThreadEnabled);
  ClientSettings.addMuteDetectionEnabled(builder, muteDetectionEnabled);
  ClientSettings.addIosUnityWebRequestEnabled(builder, iosUnityWebRequestEnabled);
  ClientSettings.addLevelStartEndImprovementsEnabled(builder, levelStartEndImprovementsEnabled);
  ClientSettings.addRefreshRateFixEnabled(builder, refreshRateFixEnabled);
  ClientSettings.addTermsAndConditionsVersion(builder, termsAndConditionsVersion);
  ClientSettings.addAppCheckEnabled(builder, appCheckEnabled);
  ClientSettings.addSendFullKeyValueVersion(builder, sendFullKeyValueVersion);
  ClientSettings.addAnalyticsBlockDisabled(builder, analyticsBlockDisabled);
  return ClientSettings.endClientSettings(builder);
}
}
