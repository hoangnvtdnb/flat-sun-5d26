// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class RoyalPassUserProgress {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RoyalPassUserProgress {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRoyalPassUserProgress(bb:flatbuffers.ByteBuffer, obj?:RoyalPassUserProgress):RoyalPassUserProgress {
  return (obj || new RoyalPassUserProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRoyalPassUserProgress(bb:flatbuffers.ByteBuffer, obj?:RoyalPassUserProgress):RoyalPassUserProgress {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RoyalPassUserProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

passData():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

freeData():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

goldData():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startRoyalPassUserProgress(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPassData(builder:flatbuffers.Builder, passData:bigint) {
  builder.addFieldInt64(0, passData, BigInt('0'));
}

static addFreeData(builder:flatbuffers.Builder, freeData:bigint) {
  builder.addFieldInt64(1, freeData, BigInt('0'));
}

static addGoldData(builder:flatbuffers.Builder, goldData:bigint) {
  builder.addFieldInt64(2, goldData, BigInt('0'));
}

static endRoyalPassUserProgress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRoyalPassUserProgress(builder:flatbuffers.Builder, passData:bigint, freeData:bigint, goldData:bigint):flatbuffers.Offset {
  RoyalPassUserProgress.startRoyalPassUserProgress(builder);
  RoyalPassUserProgress.addPassData(builder, passData);
  RoyalPassUserProgress.addFreeData(builder, freeData);
  RoyalPassUserProgress.addGoldData(builder, goldData);
  return RoyalPassUserProgress.endRoyalPassUserProgress(builder);
}
}
