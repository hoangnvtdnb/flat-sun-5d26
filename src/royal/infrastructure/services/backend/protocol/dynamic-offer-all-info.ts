// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DynamicOfferInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dynamic-offer-info.js';
import { UserDynamicSegmentInfo } from '../../../../../royal/infrastructure/services/backend/protocol/user-dynamic-segment-info.js';


export class DynamicOfferAllInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DynamicOfferAllInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDynamicOfferAllInfo(bb:flatbuffers.ByteBuffer, obj?:DynamicOfferAllInfo):DynamicOfferAllInfo {
  return (obj || new DynamicOfferAllInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDynamicOfferAllInfo(bb:flatbuffers.ByteBuffer, obj?:DynamicOfferAllInfo):DynamicOfferAllInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DynamicOfferAllInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dynamicOfferEventInfoList(index: number, obj?:DynamicOfferInfo):DynamicOfferInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DynamicOfferInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dynamicOfferEventInfoListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dynamicOfferDisableFlags(index: number):string
dynamicOfferDisableFlags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dynamicOfferDisableFlags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dynamicOfferDisableFlagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

userDynamicSegmentInfo(obj?:UserDynamicSegmentInfo):UserDynamicSegmentInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new UserDynamicSegmentInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDynamicOfferAllInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDynamicOfferEventInfoList(builder:flatbuffers.Builder, dynamicOfferEventInfoListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dynamicOfferEventInfoListOffset, 0);
}

static createDynamicOfferEventInfoListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDynamicOfferEventInfoListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDynamicOfferDisableFlags(builder:flatbuffers.Builder, dynamicOfferDisableFlagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dynamicOfferDisableFlagsOffset, 0);
}

static createDynamicOfferDisableFlagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDynamicOfferDisableFlagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUserDynamicSegmentInfo(builder:flatbuffers.Builder, userDynamicSegmentInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, userDynamicSegmentInfoOffset, 0);
}

static endDynamicOfferAllInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
