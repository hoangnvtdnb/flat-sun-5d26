// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ForceData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ForceData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsForceData(bb:flatbuffers.ByteBuffer, obj?:ForceData):ForceData {
  return (obj || new ForceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsForceData(bb:flatbuffers.ByteBuffer, obj?:ForceData):ForceData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ForceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

forceLeagueScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

forceKingsCupScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

forceTeamBattleScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startForceData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addForceLeagueScore(builder:flatbuffers.Builder, forceLeagueScore:number) {
  builder.addFieldInt32(0, forceLeagueScore, 0);
}

static addForceKingsCupScore(builder:flatbuffers.Builder, forceKingsCupScore:number) {
  builder.addFieldInt32(1, forceKingsCupScore, 0);
}

static addForceTeamBattleScore(builder:flatbuffers.Builder, forceTeamBattleScore:number) {
  builder.addFieldInt32(2, forceTeamBattleScore, 0);
}

static endForceData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createForceData(builder:flatbuffers.Builder, forceLeagueScore:number, forceKingsCupScore:number, forceTeamBattleScore:number):flatbuffers.Offset {
  ForceData.startForceData(builder);
  ForceData.addForceLeagueScore(builder, forceLeagueScore);
  ForceData.addForceKingsCupScore(builder, forceKingsCupScore);
  ForceData.addForceTeamBattleScore(builder, forceTeamBattleScore);
  return ForceData.endForceData(builder);
}
}
