// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TcpResponseType } from '../../../../../royal/infrastructure/services/backend/protocol/tcp-response-type.js';


export class TcpResponsePackage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TcpResponsePackage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTcpResponsePackage(bb:flatbuffers.ByteBuffer, obj?:TcpResponsePackage):TcpResponsePackage {
  return (obj || new TcpResponsePackage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTcpResponsePackage(bb:flatbuffers.ByteBuffer, obj?:TcpResponsePackage):TcpResponsePackage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TcpResponsePackage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dataType():TcpResponseType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TcpResponseType.NONE;
}

static startTcpResponsePackage(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDataType(builder:flatbuffers.Builder, dataType:TcpResponseType) {
  builder.addFieldInt8(0, dataType, TcpResponseType.NONE);
}

static endTcpResponsePackage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTcpResponsePackage(builder:flatbuffers.Builder, dataType:TcpResponseType):flatbuffers.Offset {
  TcpResponsePackage.startTcpResponsePackage(builder);
  TcpResponsePackage.addDataType(builder, dataType);
  return TcpResponsePackage.endTcpResponsePackage(builder);
}
}
