// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FriendProfile } from '../../../../../royal/infrastructure/services/backend/protocol/friend-profile.js';
import { SuggestionProfile } from '../../../../../royal/infrastructure/services/backend/protocol/suggestion-profile.js';


export class GetFriendsResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetFriendsResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetFriendsResponse(bb:flatbuffers.ByteBuffer, obj?:GetFriendsResponse):GetFriendsResponse {
  return (obj || new GetFriendsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetFriendsResponse(bb:flatbuffers.ByteBuffer, obj?:GetFriendsResponse):GetFriendsResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetFriendsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

friendsLength(index: number, obj?:FriendProfile):FriendProfile|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new FriendProfile()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

friendsLengthLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

suggestionsLength(index: number, obj?:SuggestionProfile):SuggestionProfile|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new SuggestionProfile()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

suggestionsLengthLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGetFriendsResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFriendsLength(builder:flatbuffers.Builder, friendsLengthOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, friendsLengthOffset, 0);
}

static createFriendsLengthVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFriendsLengthVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSuggestionsLength(builder:flatbuffers.Builder, suggestionsLengthOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, suggestionsLengthOffset, 0);
}

static createSuggestionsLengthVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSuggestionsLengthVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGetFriendsResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetFriendsResponse(builder:flatbuffers.Builder, friendsLengthOffset:flatbuffers.Offset, suggestionsLengthOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetFriendsResponse.startGetFriendsResponse(builder);
  GetFriendsResponse.addFriendsLength(builder, friendsLengthOffset);
  GetFriendsResponse.addSuggestionsLength(builder, suggestionsLengthOffset);
  return GetFriendsResponse.endGetFriendsResponse(builder);
}
}
