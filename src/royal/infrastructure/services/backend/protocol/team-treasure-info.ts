// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TeamTreasureUserInfo } from '../../../../../royal/infrastructure/services/backend/protocol/team-treasure-user-info.js';


export class TeamTreasureInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TeamTreasureInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTeamTreasureInfo(bb:flatbuffers.ByteBuffer, obj?:TeamTreasureInfo):TeamTreasureInfo {
  return (obj || new TeamTreasureInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTeamTreasureInfo(bb:flatbuffers.ByteBuffer, obj?:TeamTreasureInfo):TeamTreasureInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TeamTreasureInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

segment():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

progress():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

remaningTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

config():string|null
config(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
config(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

configVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

usersLength(index: number, obj?:TeamTreasureUserInfo):TeamTreasureUserInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new TeamTreasureUserInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

usersLengthLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

teamTreasureUserScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

serverEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startTeamTreasureInfo(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addEventId(builder:flatbuffers.Builder, eventId:number) {
  builder.addFieldInt32(0, eventId, 0);
}

static addTeamScore(builder:flatbuffers.Builder, teamScore:number) {
  builder.addFieldInt32(1, teamScore, 0);
}

static addSegment(builder:flatbuffers.Builder, segment:number) {
  builder.addFieldInt32(2, segment, 0);
}

static addProgress(builder:flatbuffers.Builder, progress:number) {
  builder.addFieldInt32(3, progress, 0);
}

static addRemaningTime(builder:flatbuffers.Builder, remaningTime:bigint) {
  builder.addFieldInt64(4, remaningTime, BigInt('0'));
}

static addConfig(builder:flatbuffers.Builder, configOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, configOffset, 0);
}

static addConfigVersion(builder:flatbuffers.Builder, configVersion:number) {
  builder.addFieldInt32(6, configVersion, 0);
}

static addUsersLength(builder:flatbuffers.Builder, usersLengthOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, usersLengthOffset, 0);
}

static createUsersLengthVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUsersLengthVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTeamTreasureUserScore(builder:flatbuffers.Builder, teamTreasureUserScore:number) {
  builder.addFieldInt32(8, teamTreasureUserScore, 0);
}

static addServerEventId(builder:flatbuffers.Builder, serverEventId:number) {
  builder.addFieldInt32(9, serverEventId, 0);
}

static endTeamTreasureInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTeamTreasureInfo(builder:flatbuffers.Builder, eventId:number, teamScore:number, segment:number, progress:number, remaningTime:bigint, configOffset:flatbuffers.Offset, configVersion:number, usersLengthOffset:flatbuffers.Offset, teamTreasureUserScore:number, serverEventId:number):flatbuffers.Offset {
  TeamTreasureInfo.startTeamTreasureInfo(builder);
  TeamTreasureInfo.addEventId(builder, eventId);
  TeamTreasureInfo.addTeamScore(builder, teamScore);
  TeamTreasureInfo.addSegment(builder, segment);
  TeamTreasureInfo.addProgress(builder, progress);
  TeamTreasureInfo.addRemaningTime(builder, remaningTime);
  TeamTreasureInfo.addConfig(builder, configOffset);
  TeamTreasureInfo.addConfigVersion(builder, configVersion);
  TeamTreasureInfo.addUsersLength(builder, usersLengthOffset);
  TeamTreasureInfo.addTeamTreasureUserScore(builder, teamTreasureUserScore);
  TeamTreasureInfo.addServerEventId(builder, serverEventId);
  return TeamTreasureInfo.endTeamTreasureInfo(builder);
}
}
