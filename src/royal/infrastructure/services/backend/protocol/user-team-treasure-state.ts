// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UserTeamTreasureState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserTeamTreasureState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserTeamTreasureState(bb:flatbuffers.ByteBuffer, obj?:UserTeamTreasureState):UserTeamTreasureState {
  return (obj || new UserTeamTreasureState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserTeamTreasureState(bb:flatbuffers.ByteBuffer, obj?:UserTeamTreasureState):UserTeamTreasureState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserTeamTreasureState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isEligible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isValid():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startUserTeamTreasureState(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addEventId(builder:flatbuffers.Builder, eventId:number) {
  builder.addFieldInt32(0, eventId, 0);
}

static addIsEligible(builder:flatbuffers.Builder, isEligible:boolean) {
  builder.addFieldInt8(1, +isEligible, +false);
}

static addIsValid(builder:flatbuffers.Builder, isValid:boolean) {
  builder.addFieldInt8(2, +isValid, +false);
}

static endUserTeamTreasureState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUserTeamTreasureState(builder:flatbuffers.Builder, eventId:number, isEligible:boolean, isValid:boolean):flatbuffers.Offset {
  UserTeamTreasureState.startUserTeamTreasureState(builder);
  UserTeamTreasureState.addEventId(builder, eventId);
  UserTeamTreasureState.addIsEligible(builder, isEligible);
  UserTeamTreasureState.addIsValid(builder, isValid);
  return UserTeamTreasureState.endUserTeamTreasureState(builder);
}
}
