// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TeamBattleTeam } from '../../../../../royal/infrastructure/services/backend/protocol/team-battle-team.js';
import { TeamBattleUser } from '../../../../../royal/infrastructure/services/backend/protocol/team-battle-user.js';
import { UserEventStatus } from '../../../../../royal/infrastructure/services/backend/protocol/user-event-status.js';


export class TeamBattleInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TeamBattleInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTeamBattleInfo(bb:flatbuffers.ByteBuffer, obj?:TeamBattleInfo):TeamBattleInfo {
  return (obj || new TeamBattleInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTeamBattleInfo(bb:flatbuffers.ByteBuffer, obj?:TeamBattleInfo):TeamBattleInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TeamBattleInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

groupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

status():UserEventStatus {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : UserEventStatus.Continue;
}

rank():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

remainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

users(index: number, obj?:TeamBattleUser):TeamBattleUser|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new TeamBattleUser()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

usersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

teams(index: number, obj?:TeamBattleTeam):TeamBattleTeam|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new TeamBattleTeam()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

teamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

currentEvenId():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startTeamBattleInfo(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addGroupId(builder:flatbuffers.Builder, groupId:bigint) {
  builder.addFieldInt64(0, groupId, BigInt('0'));
}

static addStatus(builder:flatbuffers.Builder, status:UserEventStatus) {
  builder.addFieldInt8(1, status, UserEventStatus.Continue);
}

static addRank(builder:flatbuffers.Builder, rank:number) {
  builder.addFieldInt32(2, rank, 0);
}

static addRemainingTime(builder:flatbuffers.Builder, remainingTime:bigint) {
  builder.addFieldInt64(3, remainingTime, BigInt('0'));
}

static addUsers(builder:flatbuffers.Builder, usersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, usersOffset, 0);
}

static createUsersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUsersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTeams(builder:flatbuffers.Builder, teamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, teamsOffset, 0);
}

static createTeamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTeamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(6, score, 0);
}

static addCurrentEvenId(builder:flatbuffers.Builder, currentEvenId:number) {
  builder.addFieldInt32(7, currentEvenId, 0);
}

static endTeamBattleInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTeamBattleInfo(builder:flatbuffers.Builder, groupId:bigint, status:UserEventStatus, rank:number, remainingTime:bigint, usersOffset:flatbuffers.Offset, teamsOffset:flatbuffers.Offset, score:number, currentEvenId:number):flatbuffers.Offset {
  TeamBattleInfo.startTeamBattleInfo(builder);
  TeamBattleInfo.addGroupId(builder, groupId);
  TeamBattleInfo.addStatus(builder, status);
  TeamBattleInfo.addRank(builder, rank);
  TeamBattleInfo.addRemainingTime(builder, remainingTime);
  TeamBattleInfo.addUsers(builder, usersOffset);
  TeamBattleInfo.addTeams(builder, teamsOffset);
  TeamBattleInfo.addScore(builder, score);
  TeamBattleInfo.addCurrentEvenId(builder, currentEvenId);
  return TeamBattleInfo.endTeamBattleInfo(builder);
}
}
