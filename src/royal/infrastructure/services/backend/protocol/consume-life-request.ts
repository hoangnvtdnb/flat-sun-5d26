// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ConsumeLifeRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConsumeLifeRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConsumeLifeRequest(bb:flatbuffers.ByteBuffer, obj?:ConsumeLifeRequest):ConsumeLifeRequest {
  return (obj || new ConsumeLifeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConsumeLifeRequest(bb:flatbuffers.ByteBuffer, obj?:ConsumeLifeRequest):ConsumeLifeRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConsumeLifeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

consumed(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

consumedLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startConsumeLifeRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addConsumed(builder:flatbuffers.Builder, consumedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, consumedOffset, 0);
}

static createConsumedVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startConsumedVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static endConsumeLifeRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConsumeLifeRequest(builder:flatbuffers.Builder, consumedOffset:flatbuffers.Offset):flatbuffers.Offset {
  ConsumeLifeRequest.startConsumeLifeRequest(builder);
  ConsumeLifeRequest.addConsumed(builder, consumedOffset);
  return ConsumeLifeRequest.endConsumeLifeRequest(builder);
}
}
