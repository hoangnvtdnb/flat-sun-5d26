// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SpaceMissionUser } from '../../../../../royal/infrastructure/services/backend/protocol/space-mission-user.js';


export class SpaceMissionInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpaceMissionInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSpaceMissionInfo(bb:flatbuffers.ByteBuffer, obj?:SpaceMissionInfo):SpaceMissionInfo {
  return (obj || new SpaceMissionInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSpaceMissionInfo(bb:flatbuffers.ByteBuffer, obj?:SpaceMissionInfo):SpaceMissionInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SpaceMissionInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

groupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

remainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

users(index: number, obj?:SpaceMissionUser):SpaceMissionUser|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new SpaceMissionUser()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

usersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

serverEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

step():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isWinner():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

config():string|null
config(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
config(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

configVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startSpaceMissionInfo(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addEventId(builder:flatbuffers.Builder, eventId:number) {
  builder.addFieldInt32(0, eventId, 0);
}

static addGroupId(builder:flatbuffers.Builder, groupId:bigint) {
  builder.addFieldInt64(1, groupId, BigInt('0'));
}

static addRemainingTime(builder:flatbuffers.Builder, remainingTime:bigint) {
  builder.addFieldInt64(2, remainingTime, BigInt('0'));
}

static addUsers(builder:flatbuffers.Builder, usersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, usersOffset, 0);
}

static createUsersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUsersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addServerEventId(builder:flatbuffers.Builder, serverEventId:number) {
  builder.addFieldInt32(4, serverEventId, 0);
}

static addStep(builder:flatbuffers.Builder, step:number) {
  builder.addFieldInt32(5, step, 0);
}

static addIsWinner(builder:flatbuffers.Builder, isWinner:boolean) {
  builder.addFieldInt8(6, +isWinner, +false);
}

static addConfig(builder:flatbuffers.Builder, configOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, configOffset, 0);
}

static addConfigVersion(builder:flatbuffers.Builder, configVersion:number) {
  builder.addFieldInt32(8, configVersion, 0);
}

static endSpaceMissionInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSpaceMissionInfo(builder:flatbuffers.Builder, eventId:number, groupId:bigint, remainingTime:bigint, usersOffset:flatbuffers.Offset, serverEventId:number, step:number, isWinner:boolean, configOffset:flatbuffers.Offset, configVersion:number):flatbuffers.Offset {
  SpaceMissionInfo.startSpaceMissionInfo(builder);
  SpaceMissionInfo.addEventId(builder, eventId);
  SpaceMissionInfo.addGroupId(builder, groupId);
  SpaceMissionInfo.addRemainingTime(builder, remainingTime);
  SpaceMissionInfo.addUsers(builder, usersOffset);
  SpaceMissionInfo.addServerEventId(builder, serverEventId);
  SpaceMissionInfo.addStep(builder, step);
  SpaceMissionInfo.addIsWinner(builder, isWinner);
  SpaceMissionInfo.addConfig(builder, configOffset);
  SpaceMissionInfo.addConfigVersion(builder, configVersion);
  return SpaceMissionInfo.endSpaceMissionInfo(builder);
}
}
