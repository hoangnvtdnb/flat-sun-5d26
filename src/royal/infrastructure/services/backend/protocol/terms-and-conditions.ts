// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class TermsAndConditions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TermsAndConditions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTermsAndConditions(bb:flatbuffers.ByteBuffer, obj?:TermsAndConditions):TermsAndConditions {
  return (obj || new TermsAndConditions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTermsAndConditions(bb:flatbuffers.ByteBuffer, obj?:TermsAndConditions):TermsAndConditions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TermsAndConditions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

canShowUpdate():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startTermsAndConditions(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(0, version, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, textOffset, 0);
}

static addCanShowUpdate(builder:flatbuffers.Builder, canShowUpdate:boolean) {
  builder.addFieldInt8(2, +canShowUpdate, +false);
}

static endTermsAndConditions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTermsAndConditions(builder:flatbuffers.Builder, version:number, textOffset:flatbuffers.Offset, canShowUpdate:boolean):flatbuffers.Offset {
  TermsAndConditions.startTermsAndConditions(builder);
  TermsAndConditions.addVersion(builder, version);
  TermsAndConditions.addText(builder, textOffset);
  TermsAndConditions.addCanShowUpdate(builder, canShowUpdate);
  return TermsAndConditions.endTermsAndConditions(builder);
}
}
