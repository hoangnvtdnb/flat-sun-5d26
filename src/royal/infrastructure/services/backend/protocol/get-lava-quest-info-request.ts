// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class GetLavaQuestInfoRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetLavaQuestInfoRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetLavaQuestInfoRequest(bb:flatbuffers.ByteBuffer, obj?:GetLavaQuestInfoRequest):GetLavaQuestInfoRequest {
  return (obj || new GetLavaQuestInfoRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetLavaQuestInfoRequest(bb:flatbuffers.ByteBuffer, obj?:GetLavaQuestInfoRequest):GetLavaQuestInfoRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetLavaQuestInfoRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

startLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isLeagueLevel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

scenario():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

winnerCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

eventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startGetLavaQuestInfoRequest(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addStartLevel(builder:flatbuffers.Builder, startLevel:number) {
  builder.addFieldInt32(0, startLevel, 0);
}

static addIsLeagueLevel(builder:flatbuffers.Builder, isLeagueLevel:boolean) {
  builder.addFieldInt8(1, +isLeagueLevel, +false);
}

static addScenario(builder:flatbuffers.Builder, scenario:number) {
  builder.addFieldInt32(2, scenario, 0);
}

static addWinnerCount(builder:flatbuffers.Builder, winnerCount:number) {
  builder.addFieldInt32(3, winnerCount, 0);
}

static addEventId(builder:flatbuffers.Builder, eventId:number) {
  builder.addFieldInt32(4, eventId, 0);
}

static endGetLavaQuestInfoRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetLavaQuestInfoRequest(builder:flatbuffers.Builder, startLevel:number, isLeagueLevel:boolean, scenario:number, winnerCount:number, eventId:number):flatbuffers.Offset {
  GetLavaQuestInfoRequest.startGetLavaQuestInfoRequest(builder);
  GetLavaQuestInfoRequest.addStartLevel(builder, startLevel);
  GetLavaQuestInfoRequest.addIsLeagueLevel(builder, isLeagueLevel);
  GetLavaQuestInfoRequest.addScenario(builder, scenario);
  GetLavaQuestInfoRequest.addWinnerCount(builder, winnerCount);
  GetLavaQuestInfoRequest.addEventId(builder, eventId);
  return GetLavaQuestInfoRequest.endGetLavaQuestInfoRequest(builder);
}
}
