// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class CardInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CardInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCardInfo(bb:flatbuffers.ByteBuffer, obj?:CardInfo):CardInfo {
  return (obj || new CardInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCardInfo(bb:flatbuffers.ByteBuffer, obj?:CardInfo):CardInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CardInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cardId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

setId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startCardInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCardId(builder:flatbuffers.Builder, cardId:number) {
  builder.addFieldInt32(0, cardId, 0);
}

static addSetId(builder:flatbuffers.Builder, setId:number) {
  builder.addFieldInt32(1, setId, 0);
}

static endCardInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCardInfo(builder:flatbuffers.Builder, cardId:number, setId:number):flatbuffers.Offset {
  CardInfo.startCardInfo(builder);
  CardInfo.addCardId(builder, cardId);
  CardInfo.addSetId(builder, setId);
  return CardInfo.endCardInfo(builder);
}
}
