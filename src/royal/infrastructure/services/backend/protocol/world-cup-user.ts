// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class WorldCupUser {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WorldCupUser {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWorldCupUser(bb:flatbuffers.ByteBuffer, obj?:WorldCupUser):WorldCupUser {
  return (obj || new WorldCupUser()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWorldCupUser(bb:flatbuffers.ByteBuffer, obj?:WorldCupUser):WorldCupUser {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WorldCupUser()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

rank():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isGold():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

teamName():string|null
teamName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamLogo():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hasSpecialNameStyle():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startWorldCupUser(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addUserId(builder:flatbuffers.Builder, userId:bigint) {
  builder.addFieldInt64(0, userId, BigInt('0'));
}

static addRank(builder:flatbuffers.Builder, rank:number) {
  builder.addFieldInt32(1, rank, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(3, score, 0);
}

static addIsGold(builder:flatbuffers.Builder, isGold:boolean) {
  builder.addFieldInt8(4, +isGold, +false);
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(5, teamId, BigInt('0'));
}

static addTeamName(builder:flatbuffers.Builder, teamNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, teamNameOffset, 0);
}

static addTeamLogo(builder:flatbuffers.Builder, teamLogo:number) {
  builder.addFieldInt32(7, teamLogo, 0);
}

static addHasSpecialNameStyle(builder:flatbuffers.Builder, hasSpecialNameStyle:boolean) {
  builder.addFieldInt8(8, +hasSpecialNameStyle, +false);
}

static endWorldCupUser(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWorldCupUser(builder:flatbuffers.Builder, userId:bigint, rank:number, nameOffset:flatbuffers.Offset, score:number, isGold:boolean, teamId:bigint, teamNameOffset:flatbuffers.Offset, teamLogo:number, hasSpecialNameStyle:boolean):flatbuffers.Offset {
  WorldCupUser.startWorldCupUser(builder);
  WorldCupUser.addUserId(builder, userId);
  WorldCupUser.addRank(builder, rank);
  WorldCupUser.addName(builder, nameOffset);
  WorldCupUser.addScore(builder, score);
  WorldCupUser.addIsGold(builder, isGold);
  WorldCupUser.addTeamId(builder, teamId);
  WorldCupUser.addTeamName(builder, teamNameOffset);
  WorldCupUser.addTeamLogo(builder, teamLogo);
  WorldCupUser.addHasSpecialNameStyle(builder, hasSpecialNameStyle);
  return WorldCupUser.endWorldCupUser(builder);
}
}
