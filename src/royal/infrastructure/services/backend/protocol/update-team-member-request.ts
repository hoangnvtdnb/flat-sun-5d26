// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TeamMemberOperationType } from '../../../../../royal/infrastructure/services/backend/protocol/team-member-operation-type.js';


export class UpdateTeamMemberRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateTeamMemberRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateTeamMemberRequest(bb:flatbuffers.ByteBuffer, obj?:UpdateTeamMemberRequest):UpdateTeamMemberRequest {
  return (obj || new UpdateTeamMemberRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateTeamMemberRequest(bb:flatbuffers.ByteBuffer, obj?:UpdateTeamMemberRequest):UpdateTeamMemberRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateTeamMemberRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

memberId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

operation():TeamMemberOperationType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TeamMemberOperationType.Accept;
}

static startUpdateTeamMemberRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(0, teamId, BigInt('0'));
}

static addMemberId(builder:flatbuffers.Builder, memberId:bigint) {
  builder.addFieldInt64(1, memberId, BigInt('0'));
}

static addOperation(builder:flatbuffers.Builder, operation:TeamMemberOperationType) {
  builder.addFieldInt8(2, operation, TeamMemberOperationType.Accept);
}

static endUpdateTeamMemberRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateTeamMemberRequest(builder:flatbuffers.Builder, teamId:bigint, memberId:bigint, operation:TeamMemberOperationType):flatbuffers.Offset {
  UpdateTeamMemberRequest.startUpdateTeamMemberRequest(builder);
  UpdateTeamMemberRequest.addTeamId(builder, teamId);
  UpdateTeamMemberRequest.addMemberId(builder, memberId);
  UpdateTeamMemberRequest.addOperation(builder, operation);
  return UpdateTeamMemberRequest.endUpdateTeamMemberRequest(builder);
}
}
