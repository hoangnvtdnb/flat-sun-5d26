// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UpdateLeagueData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateLeagueData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateLeagueData(bb:flatbuffers.ByteBuffer, obj?:UpdateLeagueData):UpdateLeagueData {
  return (obj || new UpdateLeagueData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateLeagueData(bb:flatbuffers.ByteBuffer, obj?:UpdateLeagueData):UpdateLeagueData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateLeagueData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

groupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

leagueLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

depreciatedClaim():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startUpdateLeagueData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addGroupId(builder:flatbuffers.Builder, groupId:bigint) {
  builder.addFieldInt64(0, groupId, BigInt('0'));
}

static addLeagueLevel(builder:flatbuffers.Builder, leagueLevel:number) {
  builder.addFieldInt32(1, leagueLevel, 0);
}

static addDepreciatedClaim(builder:flatbuffers.Builder, depreciatedClaim:boolean) {
  builder.addFieldInt8(2, +depreciatedClaim, +false);
}

static endUpdateLeagueData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateLeagueData(builder:flatbuffers.Builder, groupId:bigint, leagueLevel:number, depreciatedClaim:boolean):flatbuffers.Offset {
  UpdateLeagueData.startUpdateLeagueData(builder);
  UpdateLeagueData.addGroupId(builder, groupId);
  UpdateLeagueData.addLeagueLevel(builder, leagueLevel);
  UpdateLeagueData.addDepreciatedClaim(builder, depreciatedClaim);
  return UpdateLeagueData.endUpdateLeagueData(builder);
}
}
