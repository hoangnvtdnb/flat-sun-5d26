// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ByteArrayKeyValue } from '../../../../../royal/infrastructure/services/backend/protocol/byte-array-key-value.js';


export class GetByteArrayKeyValuesResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetByteArrayKeyValuesResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetByteArrayKeyValuesResponse(bb:flatbuffers.ByteBuffer, obj?:GetByteArrayKeyValuesResponse):GetByteArrayKeyValuesResponse {
  return (obj || new GetByteArrayKeyValuesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetByteArrayKeyValuesResponse(bb:flatbuffers.ByteBuffer, obj?:GetByteArrayKeyValuesResponse):GetByteArrayKeyValuesResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetByteArrayKeyValuesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

byteArrayKeyValueList(index: number, obj?:ByteArrayKeyValue):ByteArrayKeyValue|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ByteArrayKeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

byteArrayKeyValueListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGetByteArrayKeyValuesResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addByteArrayKeyValueList(builder:flatbuffers.Builder, byteArrayKeyValueListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, byteArrayKeyValueListOffset, 0);
}

static createByteArrayKeyValueListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startByteArrayKeyValueListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGetByteArrayKeyValuesResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetByteArrayKeyValuesResponse(builder:flatbuffers.Builder, byteArrayKeyValueListOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetByteArrayKeyValuesResponse.startGetByteArrayKeyValuesResponse(builder);
  GetByteArrayKeyValuesResponse.addByteArrayKeyValueList(builder, byteArrayKeyValueListOffset);
  return GetByteArrayKeyValuesResponse.endGetByteArrayKeyValuesResponse(builder);
}
}
