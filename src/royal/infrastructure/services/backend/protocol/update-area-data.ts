// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UpdateAreaData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateAreaData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateAreaData(bb:flatbuffers.ByteBuffer, obj?:UpdateAreaData):UpdateAreaData {
  return (obj || new UpdateAreaData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateAreaData(bb:flatbuffers.ByteBuffer, obj?:UpdateAreaData):UpdateAreaData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateAreaData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

areaId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

areaTasks():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

areaStatus():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startUpdateAreaData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addAreaId(builder:flatbuffers.Builder, areaId:number) {
  builder.addFieldInt32(0, areaId, 0);
}

static addAreaTasks(builder:flatbuffers.Builder, areaTasks:number) {
  builder.addFieldInt32(1, areaTasks, 0);
}

static addAreaStatus(builder:flatbuffers.Builder, areaStatus:number) {
  builder.addFieldInt32(2, areaStatus, 0);
}

static endUpdateAreaData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateAreaData(builder:flatbuffers.Builder, areaId:number, areaTasks:number, areaStatus:number):flatbuffers.Offset {
  UpdateAreaData.startUpdateAreaData(builder);
  UpdateAreaData.addAreaId(builder, areaId);
  UpdateAreaData.addAreaTasks(builder, areaTasks);
  UpdateAreaData.addAreaStatus(builder, areaStatus);
  return UpdateAreaData.endUpdateAreaData(builder);
}
}
