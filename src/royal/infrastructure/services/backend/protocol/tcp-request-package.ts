// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TcpRequestType } from '../../../../../royal/infrastructure/services/backend/protocol/tcp-request-type.js';


export class TcpRequestPackage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TcpRequestPackage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTcpRequestPackage(bb:flatbuffers.ByteBuffer, obj?:TcpRequestPackage):TcpRequestPackage {
  return (obj || new TcpRequestPackage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTcpRequestPackage(bb:flatbuffers.ByteBuffer, obj?:TcpRequestPackage):TcpRequestPackage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TcpRequestPackage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dataType():TcpRequestType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TcpRequestType.NONE;
}

static startTcpRequestPackage(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDataType(builder:flatbuffers.Builder, dataType:TcpRequestType) {
  builder.addFieldInt8(0, dataType, TcpRequestType.NONE);
}

static endTcpRequestPackage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTcpRequestPackage(builder:flatbuffers.Builder, dataType:TcpRequestType):flatbuffers.Offset {
  TcpRequestPackage.startTcpRequestPackage(builder);
  TcpRequestPackage.addDataType(builder, dataType);
  return TcpRequestPackage.endTcpRequestPackage(builder);
}
}
