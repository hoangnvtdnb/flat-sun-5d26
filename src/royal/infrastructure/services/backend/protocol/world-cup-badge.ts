// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { WorldCupBadgeType } from '../../../../../royal/infrastructure/services/backend/protocol/world-cup-badge-type.js';


export class WorldCupBadge {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WorldCupBadge {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWorldCupBadge(bb:flatbuffers.ByteBuffer, obj?:WorldCupBadge):WorldCupBadge {
  return (obj || new WorldCupBadge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWorldCupBadge(bb:flatbuffers.ByteBuffer, obj?:WorldCupBadge):WorldCupBadge {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WorldCupBadge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():WorldCupBadgeType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WorldCupBadgeType.None;
}

country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startWorldCupBadge(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, type:WorldCupBadgeType) {
  builder.addFieldInt8(0, type, WorldCupBadgeType.None);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, countryOffset, 0);
}

static endWorldCupBadge(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWorldCupBadge(builder:flatbuffers.Builder, type:WorldCupBadgeType, countryOffset:flatbuffers.Offset):flatbuffers.Offset {
  WorldCupBadge.startWorldCupBadge(builder);
  WorldCupBadge.addType(builder, type);
  WorldCupBadge.addCountry(builder, countryOffset);
  return WorldCupBadge.endWorldCupBadge(builder);
}
}
