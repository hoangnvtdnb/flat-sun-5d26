// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ConfigVersions } from '../../../../../royal/infrastructure/services/backend/protocol/config-versions.js';


export class GetEventInfoRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetEventInfoRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetEventInfoRequest(bb:flatbuffers.ByteBuffer, obj?:GetEventInfoRequest):GetEventInfoRequest {
  return (obj || new GetEventInfoRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetEventInfoRequest(bb:flatbuffers.ByteBuffer, obj?:GetEventInfoRequest):GetEventInfoRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetEventInfoRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

level():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

configVersions(obj?:ConfigVersions):ConfigVersions|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ConfigVersions()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetEventInfoRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, countryOffset, 0);
}

static addLevel(builder:flatbuffers.Builder, level:number) {
  builder.addFieldInt32(1, level, 0);
}

static addConfigVersions(builder:flatbuffers.Builder, configVersionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, configVersionsOffset, 0);
}

static endGetEventInfoRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
