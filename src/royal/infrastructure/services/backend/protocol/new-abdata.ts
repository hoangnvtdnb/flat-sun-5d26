// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SingleABData } from '../../../../../royal/infrastructure/services/backend/protocol/single-abdata.js';


export class NewABData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NewABData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNewABData(bb:flatbuffers.ByteBuffer, obj?:NewABData):NewABData {
  return (obj || new NewABData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNewABData(bb:flatbuffers.ByteBuffer, obj?:NewABData):NewABData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NewABData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

allTests(index: number, obj?:SingleABData):SingleABData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SingleABData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

allTestsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

updatedAbTestKeys(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

updatedAbTestKeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

updatedAbTestKeysArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startNewABData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAllTests(builder:flatbuffers.Builder, allTestsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, allTestsOffset, 0);
}

static createAllTestsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAllTestsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUpdatedAbTestKeys(builder:flatbuffers.Builder, updatedAbTestKeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, updatedAbTestKeysOffset, 0);
}

static createUpdatedAbTestKeysVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createUpdatedAbTestKeysVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createUpdatedAbTestKeysVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startUpdatedAbTestKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endNewABData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNewABData(builder:flatbuffers.Builder, allTestsOffset:flatbuffers.Offset, updatedAbTestKeysOffset:flatbuffers.Offset):flatbuffers.Offset {
  NewABData.startNewABData(builder);
  NewABData.addAllTests(builder, allTestsOffset);
  NewABData.addUpdatedAbTestKeys(builder, updatedAbTestKeysOffset);
  return NewABData.endNewABData(builder);
}
}
