// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FriendType } from '../../../../../royal/infrastructure/services/backend/protocol/friend-type.js';
import { ProfileSetting } from '../../../../../royal/infrastructure/services/backend/protocol/profile-setting.js';
import { WorldCupBadge } from '../../../../../royal/infrastructure/services/backend/protocol/world-cup-badge.js';


export class FriendProfile {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FriendProfile {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFriendProfile(bb:flatbuffers.ByteBuffer, obj?:FriendProfile):FriendProfile {
  return (obj || new FriendProfile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFriendProfile(bb:flatbuffers.ByteBuffer, obj?:FriendProfile):FriendProfile {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FriendProfile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

level():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

crown():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

teamName():string|null
teamName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamLogo():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

deprecatedIsGold():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

hasSpecialNameStyle():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

profileSetting(obj?:ProfileSetting):ProfileSetting|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new ProfileSetting()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

type():FriendType {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FriendType.Requested;
}

lastLevelUpdateDate():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

worldCupBadge(obj?:WorldCupBadge):WorldCupBadge|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new WorldCupBadge()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startFriendProfile(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addUserId(builder:flatbuffers.Builder, userId:bigint) {
  builder.addFieldInt64(0, userId, BigInt('0'));
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addLevel(builder:flatbuffers.Builder, level:number) {
  builder.addFieldInt32(2, level, 0);
}

static addCrown(builder:flatbuffers.Builder, crown:number) {
  builder.addFieldInt32(3, crown, 0);
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(4, teamId, BigInt('0'));
}

static addTeamName(builder:flatbuffers.Builder, teamNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, teamNameOffset, 0);
}

static addTeamLogo(builder:flatbuffers.Builder, teamLogo:number) {
  builder.addFieldInt32(6, teamLogo, 0);
}

static addDeprecatedIsGold(builder:flatbuffers.Builder, deprecatedIsGold:boolean) {
  builder.addFieldInt8(7, +deprecatedIsGold, +false);
}

static addHasSpecialNameStyle(builder:flatbuffers.Builder, hasSpecialNameStyle:boolean) {
  builder.addFieldInt8(8, +hasSpecialNameStyle, +false);
}

static addProfileSetting(builder:flatbuffers.Builder, profileSettingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, profileSettingOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:FriendType) {
  builder.addFieldInt8(10, type, FriendType.Requested);
}

static addLastLevelUpdateDate(builder:flatbuffers.Builder, lastLevelUpdateDate:bigint) {
  builder.addFieldInt64(11, lastLevelUpdateDate, BigInt('0'));
}

static addWorldCupBadge(builder:flatbuffers.Builder, worldCupBadgeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, worldCupBadgeOffset, 0);
}

static endFriendProfile(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
