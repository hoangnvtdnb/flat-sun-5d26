// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class GetFacebookIdsResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetFacebookIdsResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetFacebookIdsResponse(bb:flatbuffers.ByteBuffer, obj?:GetFacebookIdsResponse):GetFacebookIdsResponse {
  return (obj || new GetFacebookIdsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetFacebookIdsResponse(bb:flatbuffers.ByteBuffer, obj?:GetFacebookIdsResponse):GetFacebookIdsResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetFacebookIdsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

facebookIds(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

facebookIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

frameIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

frameIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

frameIdsArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetFacebookIdsResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFacebookIds(builder:flatbuffers.Builder, facebookIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, facebookIdsOffset, 0);
}

static createFacebookIdsVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startFacebookIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(1, version, 0);
}

static addFrameIds(builder:flatbuffers.Builder, frameIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, frameIdsOffset, 0);
}

static createFrameIdsVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createFrameIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createFrameIdsVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startFrameIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGetFacebookIdsResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetFacebookIdsResponse(builder:flatbuffers.Builder, facebookIdsOffset:flatbuffers.Offset, version:number, frameIdsOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetFacebookIdsResponse.startGetFacebookIdsResponse(builder);
  GetFacebookIdsResponse.addFacebookIds(builder, facebookIdsOffset);
  GetFacebookIdsResponse.addVersion(builder, version);
  GetFacebookIdsResponse.addFrameIds(builder, frameIdsOffset);
  return GetFacebookIdsResponse.endGetFacebookIdsResponse(builder);
}
}
