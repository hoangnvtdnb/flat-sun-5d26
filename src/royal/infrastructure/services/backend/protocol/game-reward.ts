// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GameRewardType } from '../../../../../royal/infrastructure/services/backend/protocol/game-reward-type.js';


export class GameReward {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GameReward {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameReward(bb:flatbuffers.ByteBuffer, obj?:GameReward):GameReward {
  return (obj || new GameReward()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameReward(bb:flatbuffers.ByteBuffer, obj?:GameReward):GameReward {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameReward()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():GameRewardType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GameRewardType.NONE;
}

amount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startGameReward(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, type:GameRewardType) {
  builder.addFieldInt8(0, type, GameRewardType.NONE);
}

static addAmount(builder:flatbuffers.Builder, amount:number) {
  builder.addFieldInt32(1, amount, 0);
}

static endGameReward(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGameReward(builder:flatbuffers.Builder, type:GameRewardType, amount:number):flatbuffers.Offset {
  GameReward.startGameReward(builder);
  GameReward.addType(builder, type);
  GameReward.addAmount(builder, amount);
  return GameReward.endGameReward(builder);
}
}
