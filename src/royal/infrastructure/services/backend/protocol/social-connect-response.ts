// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ABTestContent } from '../../../../../royal/infrastructure/services/backend/protocol/abtest-content.js';
import { BalloonRiseInfo } from '../../../../../royal/infrastructure/services/backend/protocol/balloon-rise-info.js';
import { FriendProfile } from '../../../../../royal/infrastructure/services/backend/protocol/friend-profile.js';
import { FriendScore } from '../../../../../royal/infrastructure/services/backend/protocol/friend-score.js';
import { LeaderboardTeamInfo } from '../../../../../royal/infrastructure/services/backend/protocol/leaderboard-team-info.js';
import { LeaderboardUserInfo } from '../../../../../royal/infrastructure/services/backend/protocol/leaderboard-user-info.js';
import { MagicCauldronInfo } from '../../../../../royal/infrastructure/services/backend/protocol/magic-cauldron-info.js';
import { NewABData } from '../../../../../royal/infrastructure/services/backend/protocol/new-abdata.js';
import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';
import { SocialConnectStatus } from '../../../../../royal/infrastructure/services/backend/protocol/social-connect-status.js';
import { UserProgress } from '../../../../../royal/infrastructure/services/backend/protocol/user-progress.js';


export class SocialConnectResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SocialConnectResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSocialConnectResponse(bb:flatbuffers.ByteBuffer, obj?:SocialConnectResponse):SocialConnectResponse {
  return (obj || new SocialConnectResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSocialConnectResponse(bb:flatbuffers.ByteBuffer, obj?:SocialConnectResponse):SocialConnectResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SocialConnectResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

socialConnectStatus():SocialConnectStatus {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SocialConnectStatus.GuestLinkedToFacebook;
}

userId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

userToken():string|null
userToken(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userToken(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

syncId():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

userProgress(obj?:UserProgress):UserProgress|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new UserProgress()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

deprecatedFriendsLeaderboard(index: number, obj?:FriendScore):FriendScore|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new FriendScore()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

deprecatedFriendsLeaderboardLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

abTestData():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestContent(obj?:ABTestContent):ABTestContent|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new ABTestContent()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

localPlayers(index: number, obj?:LeaderboardUserInfo):LeaderboardUserInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new LeaderboardUserInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

localPlayersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

localTeams(index: number, obj?:LeaderboardTeamInfo):LeaderboardTeamInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new LeaderboardTeamInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

localTeamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

countryName():string|null
countryName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
countryName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

abTestUpdateData():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestData2():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestUpdateData2():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

installDate():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestData3():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

abTestUpdateData3():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

revenueSegment():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

newAbData(obj?:NewABData):NewABData|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? (obj || new NewABData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

deprecatedBalloonRiseInfo(obj?:BalloonRiseInfo):BalloonRiseInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? (obj || new BalloonRiseInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

revenueSegmentVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

deprecatedMagicCauldronInfo(obj?:MagicCauldronInfo):MagicCauldronInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? (obj || new MagicCauldronInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

friendsProfile(index: number, obj?:FriendProfile):FriendProfile|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? (obj || new FriendProfile()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

friendsProfileLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSocialConnectResponse(builder:flatbuffers.Builder) {
  builder.startObject(24);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addSocialConnectStatus(builder:flatbuffers.Builder, socialConnectStatus:SocialConnectStatus) {
  builder.addFieldInt8(1, socialConnectStatus, SocialConnectStatus.GuestLinkedToFacebook);
}

static addUserId(builder:flatbuffers.Builder, userId:bigint) {
  builder.addFieldInt64(2, userId, BigInt('0'));
}

static addUserToken(builder:flatbuffers.Builder, userTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, userTokenOffset, 0);
}

static addSyncId(builder:flatbuffers.Builder, syncId:number) {
  builder.addFieldInt32(4, syncId, 0);
}

static addUserProgress(builder:flatbuffers.Builder, userProgressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, userProgressOffset, 0);
}

static addDeprecatedFriendsLeaderboard(builder:flatbuffers.Builder, deprecatedFriendsLeaderboardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, deprecatedFriendsLeaderboardOffset, 0);
}

static createDeprecatedFriendsLeaderboardVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDeprecatedFriendsLeaderboardVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAbTestData(builder:flatbuffers.Builder, abTestData:bigint) {
  builder.addFieldInt64(7, abTestData, BigInt('0'));
}

static addAbTestContent(builder:flatbuffers.Builder, abTestContentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, abTestContentOffset, 0);
}

static addLocalPlayers(builder:flatbuffers.Builder, localPlayersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, localPlayersOffset, 0);
}

static createLocalPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLocalPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLocalTeams(builder:flatbuffers.Builder, localTeamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, localTeamsOffset, 0);
}

static createLocalTeamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLocalTeamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCountryName(builder:flatbuffers.Builder, countryNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, countryNameOffset, 0);
}

static addAbTestUpdateData(builder:flatbuffers.Builder, abTestUpdateData:bigint) {
  builder.addFieldInt64(12, abTestUpdateData, BigInt('0'));
}

static addAbTestData2(builder:flatbuffers.Builder, abTestData2:bigint) {
  builder.addFieldInt64(13, abTestData2, BigInt('0'));
}

static addAbTestUpdateData2(builder:flatbuffers.Builder, abTestUpdateData2:bigint) {
  builder.addFieldInt64(14, abTestUpdateData2, BigInt('0'));
}

static addInstallDate(builder:flatbuffers.Builder, installDate:bigint) {
  builder.addFieldInt64(15, installDate, BigInt('0'));
}

static addAbTestData3(builder:flatbuffers.Builder, abTestData3:bigint) {
  builder.addFieldInt64(16, abTestData3, BigInt('0'));
}

static addAbTestUpdateData3(builder:flatbuffers.Builder, abTestUpdateData3:bigint) {
  builder.addFieldInt64(17, abTestUpdateData3, BigInt('0'));
}

static addRevenueSegment(builder:flatbuffers.Builder, revenueSegment:number) {
  builder.addFieldInt32(18, revenueSegment, 0);
}

static addNewAbData(builder:flatbuffers.Builder, newAbDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, newAbDataOffset, 0);
}

static addDeprecatedBalloonRiseInfo(builder:flatbuffers.Builder, deprecatedBalloonRiseInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, deprecatedBalloonRiseInfoOffset, 0);
}

static addRevenueSegmentVersion(builder:flatbuffers.Builder, revenueSegmentVersion:number) {
  builder.addFieldInt32(21, revenueSegmentVersion, 0);
}

static addDeprecatedMagicCauldronInfo(builder:flatbuffers.Builder, deprecatedMagicCauldronInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, deprecatedMagicCauldronInfoOffset, 0);
}

static addFriendsProfile(builder:flatbuffers.Builder, friendsProfileOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, friendsProfileOffset, 0);
}

static createFriendsProfileVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFriendsProfileVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSocialConnectResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
