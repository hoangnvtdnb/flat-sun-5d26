// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DynamicOfferConfigVersions } from '../../../../../royal/infrastructure/services/backend/protocol/dynamic-offer-config-versions.js';
import { UserTeamTreasureState } from '../../../../../royal/infrastructure/services/backend/protocol/user-team-treasure-state.js';


export class PingRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PingRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPingRequest(bb:flatbuffers.ByteBuffer, obj?:PingRequest):PingRequest {
  return (obj || new PingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPingRequest(bb:flatbuffers.ByteBuffer, obj?:PingRequest):PingRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

badWordsVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

leagueGroupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

leagueConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

kingsCupGroupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

teamBattleGroupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

madnessEventVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

ladderOfferVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

royalPassVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

skyRaceGroupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

specialOfferVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

pinataPartyVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamTreasureEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamTreasureConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

deprecatedSegmentOfferConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

lightningRushGroupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

isSentAfterSocialLogout():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

spaceMissionGroupId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

spaceMissionConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

balloonRiseVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hiddenTempleConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

revenueSegmentVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamGiftOfferConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

balloonRiseProgress():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

magicCauldronConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dragonNestConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

archeryArenaConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dukesFortuneConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

eventDependencyConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

lavaQuestConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dynamicOfferConfigVersions(obj?:DynamicOfferConfigVersions):DynamicOfferConfigVersions|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? (obj || new DynamicOfferConfigVersions()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

userTeamTreasureState(obj?:UserTeamTreasureState):UserTeamTreasureState|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? (obj || new UserTeamTreasureState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

seasonalCardCollectionConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamTournamentConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

missionPursuitConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

seasonalCardPackOfferConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

missionControlConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

termsAndConditionsVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

language():string|null
language(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
language(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trainJourneyConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

oceanOdysseyConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

skyRaceConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

goldenOffersConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyLightningRushConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

puzzleBreakConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

newRoyalPassVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startPingRequest(builder:flatbuffers.Builder) {
  builder.startObject(46);
}

static addBadWordsVersion(builder:flatbuffers.Builder, badWordsVersion:number) {
  builder.addFieldInt32(0, badWordsVersion, 0);
}

static addLeagueGroupId(builder:flatbuffers.Builder, leagueGroupId:bigint) {
  builder.addFieldInt64(1, leagueGroupId, BigInt('0'));
}

static addLeagueConfigVersion(builder:flatbuffers.Builder, leagueConfigVersion:number) {
  builder.addFieldInt32(2, leagueConfigVersion, 0);
}

static addKingsCupGroupId(builder:flatbuffers.Builder, kingsCupGroupId:bigint) {
  builder.addFieldInt64(3, kingsCupGroupId, BigInt('0'));
}

static addTeamBattleGroupId(builder:flatbuffers.Builder, teamBattleGroupId:bigint) {
  builder.addFieldInt64(4, teamBattleGroupId, BigInt('0'));
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(5, teamId, BigInt('0'));
}

static addMadnessEventVersion(builder:flatbuffers.Builder, madnessEventVersion:number) {
  builder.addFieldInt32(6, madnessEventVersion, 0);
}

static addLadderOfferVersion(builder:flatbuffers.Builder, ladderOfferVersion:number) {
  builder.addFieldInt32(7, ladderOfferVersion, 0);
}

static addRoyalPassVersion(builder:flatbuffers.Builder, royalPassVersion:number) {
  builder.addFieldInt32(8, royalPassVersion, 0);
}

static addSkyRaceGroupId(builder:flatbuffers.Builder, skyRaceGroupId:bigint) {
  builder.addFieldInt64(9, skyRaceGroupId, BigInt('0'));
}

static addSpecialOfferVersion(builder:flatbuffers.Builder, specialOfferVersion:number) {
  builder.addFieldInt32(10, specialOfferVersion, 0);
}

static addPinataPartyVersion(builder:flatbuffers.Builder, pinataPartyVersion:number) {
  builder.addFieldInt32(11, pinataPartyVersion, 0);
}

static addTeamTreasureEventId(builder:flatbuffers.Builder, teamTreasureEventId:number) {
  builder.addFieldInt32(12, teamTreasureEventId, 0);
}

static addTeamTreasureConfigVersion(builder:flatbuffers.Builder, teamTreasureConfigVersion:number) {
  builder.addFieldInt32(13, teamTreasureConfigVersion, 0);
}

static addDeprecatedSegmentOfferConfigVersion(builder:flatbuffers.Builder, deprecatedSegmentOfferConfigVersion:number) {
  builder.addFieldInt32(14, deprecatedSegmentOfferConfigVersion, 0);
}

static addLightningRushGroupId(builder:flatbuffers.Builder, lightningRushGroupId:bigint) {
  builder.addFieldInt64(15, lightningRushGroupId, BigInt('0'));
}

static addIsSentAfterSocialLogout(builder:flatbuffers.Builder, isSentAfterSocialLogout:boolean) {
  builder.addFieldInt8(16, +isSentAfterSocialLogout, +false);
}

static addSpaceMissionGroupId(builder:flatbuffers.Builder, spaceMissionGroupId:bigint) {
  builder.addFieldInt64(17, spaceMissionGroupId, BigInt('0'));
}

static addSpaceMissionConfigVersion(builder:flatbuffers.Builder, spaceMissionConfigVersion:number) {
  builder.addFieldInt32(18, spaceMissionConfigVersion, 0);
}

static addBalloonRiseVersion(builder:flatbuffers.Builder, balloonRiseVersion:number) {
  builder.addFieldInt32(19, balloonRiseVersion, 0);
}

static addHiddenTempleConfigVersion(builder:flatbuffers.Builder, hiddenTempleConfigVersion:number) {
  builder.addFieldInt32(20, hiddenTempleConfigVersion, 0);
}

static addRevenueSegmentVersion(builder:flatbuffers.Builder, revenueSegmentVersion:number) {
  builder.addFieldInt32(21, revenueSegmentVersion, 0);
}

static addTeamGiftOfferConfigVersion(builder:flatbuffers.Builder, teamGiftOfferConfigVersion:number) {
  builder.addFieldInt32(22, teamGiftOfferConfigVersion, 0);
}

static addBalloonRiseProgress(builder:flatbuffers.Builder, balloonRiseProgress:bigint) {
  builder.addFieldInt64(23, balloonRiseProgress, BigInt('0'));
}

static addMagicCauldronConfigVersion(builder:flatbuffers.Builder, magicCauldronConfigVersion:number) {
  builder.addFieldInt32(24, magicCauldronConfigVersion, 0);
}

static addDragonNestConfigVersion(builder:flatbuffers.Builder, dragonNestConfigVersion:number) {
  builder.addFieldInt32(25, dragonNestConfigVersion, 0);
}

static addArcheryArenaConfigVersion(builder:flatbuffers.Builder, archeryArenaConfigVersion:number) {
  builder.addFieldInt32(26, archeryArenaConfigVersion, 0);
}

static addDukesFortuneConfigVersion(builder:flatbuffers.Builder, dukesFortuneConfigVersion:number) {
  builder.addFieldInt32(27, dukesFortuneConfigVersion, 0);
}

static addEventDependencyConfigVersion(builder:flatbuffers.Builder, eventDependencyConfigVersion:number) {
  builder.addFieldInt32(28, eventDependencyConfigVersion, 0);
}

static addLavaQuestConfigVersion(builder:flatbuffers.Builder, lavaQuestConfigVersion:number) {
  builder.addFieldInt32(29, lavaQuestConfigVersion, 0);
}

static addDynamicOfferConfigVersions(builder:flatbuffers.Builder, dynamicOfferConfigVersionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, dynamicOfferConfigVersionsOffset, 0);
}

static addUserTeamTreasureState(builder:flatbuffers.Builder, userTeamTreasureStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, userTeamTreasureStateOffset, 0);
}

static addSeasonalCardCollectionConfigVersion(builder:flatbuffers.Builder, seasonalCardCollectionConfigVersion:number) {
  builder.addFieldInt32(32, seasonalCardCollectionConfigVersion, 0);
}

static addTeamTournamentConfigVersion(builder:flatbuffers.Builder, teamTournamentConfigVersion:number) {
  builder.addFieldInt32(33, teamTournamentConfigVersion, 0);
}

static addMissionPursuitConfigVersion(builder:flatbuffers.Builder, missionPursuitConfigVersion:number) {
  builder.addFieldInt32(34, missionPursuitConfigVersion, 0);
}

static addSeasonalCardPackOfferConfigVersion(builder:flatbuffers.Builder, seasonalCardPackOfferConfigVersion:number) {
  builder.addFieldInt32(35, seasonalCardPackOfferConfigVersion, 0);
}

static addMissionControlConfigVersion(builder:flatbuffers.Builder, missionControlConfigVersion:number) {
  builder.addFieldInt32(36, missionControlConfigVersion, 0);
}

static addTermsAndConditionsVersion(builder:flatbuffers.Builder, termsAndConditionsVersion:number) {
  builder.addFieldInt32(37, termsAndConditionsVersion, 0);
}

static addLanguage(builder:flatbuffers.Builder, languageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, languageOffset, 0);
}

static addTrainJourneyConfigVersion(builder:flatbuffers.Builder, trainJourneyConfigVersion:number) {
  builder.addFieldInt32(39, trainJourneyConfigVersion, 0);
}

static addOceanOdysseyConfigVersion(builder:flatbuffers.Builder, oceanOdysseyConfigVersion:number) {
  builder.addFieldInt32(40, oceanOdysseyConfigVersion, 0);
}

static addSkyRaceConfigVersion(builder:flatbuffers.Builder, skyRaceConfigVersion:number) {
  builder.addFieldInt32(41, skyRaceConfigVersion, 0);
}

static addGoldenOffersConfigVersion(builder:flatbuffers.Builder, goldenOffersConfigVersion:number) {
  builder.addFieldInt32(42, goldenOffersConfigVersion, 0);
}

static addDailyLightningRushConfigVersion(builder:flatbuffers.Builder, dailyLightningRushConfigVersion:number) {
  builder.addFieldInt32(43, dailyLightningRushConfigVersion, 0);
}

static addPuzzleBreakConfigVersion(builder:flatbuffers.Builder, puzzleBreakConfigVersion:number) {
  builder.addFieldInt32(44, puzzleBreakConfigVersion, 0);
}

static addNewRoyalPassVersion(builder:flatbuffers.Builder, newRoyalPassVersion:number) {
  builder.addFieldInt32(45, newRoyalPassVersion, 0);
}

static endPingRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
