// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ResponseStatusCode } from '../../../../../royal/infrastructure/services/backend/protocol/response-status-code.js';
import { TeamInfoAtSearch } from '../../../../../royal/infrastructure/services/backend/protocol/team-info-at-search.js';


export class SearchTeamResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SearchTeamResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSearchTeamResponse(bb:flatbuffers.ByteBuffer, obj?:SearchTeamResponse):SearchTeamResponse {
  return (obj || new SearchTeamResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSearchTeamResponse(bb:flatbuffers.ByteBuffer, obj?:SearchTeamResponse):SearchTeamResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SearchTeamResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():ResponseStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseStatusCode.Success;
}

teams(index: number, obj?:TeamInfoAtSearch):TeamInfoAtSearch|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TeamInfoAtSearch()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

teamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pendingRequestTeamIds(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

pendingRequestTeamIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSearchTeamResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addStatus(builder:flatbuffers.Builder, status:ResponseStatusCode) {
  builder.addFieldInt8(0, status, ResponseStatusCode.Success);
}

static addTeams(builder:flatbuffers.Builder, teamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, teamsOffset, 0);
}

static createTeamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTeamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPendingRequestTeamIds(builder:flatbuffers.Builder, pendingRequestTeamIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, pendingRequestTeamIdsOffset, 0);
}

static createPendingRequestTeamIdsVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startPendingRequestTeamIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static endSearchTeamResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSearchTeamResponse(builder:flatbuffers.Builder, status:ResponseStatusCode, teamsOffset:flatbuffers.Offset, pendingRequestTeamIdsOffset:flatbuffers.Offset):flatbuffers.Offset {
  SearchTeamResponse.startSearchTeamResponse(builder);
  SearchTeamResponse.addStatus(builder, status);
  SearchTeamResponse.addTeams(builder, teamsOffset);
  SearchTeamResponse.addPendingRequestTeamIds(builder, pendingRequestTeamIdsOffset);
  return SearchTeamResponse.endSearchTeamResponse(builder);
}
}
