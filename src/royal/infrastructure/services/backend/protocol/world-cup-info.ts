// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { WorldCupStage } from '../../../../../royal/infrastructure/services/backend/protocol/world-cup-stage.js';


export class WorldCupInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WorldCupInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWorldCupInfo(bb:flatbuffers.ByteBuffer, obj?:WorldCupInfo):WorldCupInfo {
  return (obj || new WorldCupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWorldCupInfo(bb:flatbuffers.ByteBuffer, obj?:WorldCupInfo):WorldCupInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WorldCupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

serverEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

serverEventStage():WorldCupStage {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WorldCupStage.Upcoming;
}

serverStageRemainingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startWorldCupInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addServerEventId(builder:flatbuffers.Builder, serverEventId:number) {
  builder.addFieldInt32(0, serverEventId, 0);
}

static addServerEventStage(builder:flatbuffers.Builder, serverEventStage:WorldCupStage) {
  builder.addFieldInt8(1, serverEventStage, WorldCupStage.Upcoming);
}

static addServerStageRemainingTime(builder:flatbuffers.Builder, serverStageRemainingTime:bigint) {
  builder.addFieldInt64(2, serverStageRemainingTime, BigInt('0'));
}

static endWorldCupInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWorldCupInfo(builder:flatbuffers.Builder, serverEventId:number, serverEventStage:WorldCupStage, serverStageRemainingTime:bigint):flatbuffers.Offset {
  WorldCupInfo.startWorldCupInfo(builder);
  WorldCupInfo.addServerEventId(builder, serverEventId);
  WorldCupInfo.addServerEventStage(builder, serverEventStage);
  WorldCupInfo.addServerStageRemainingTime(builder, serverStageRemainingTime);
  return WorldCupInfo.endWorldCupInfo(builder);
}
}
