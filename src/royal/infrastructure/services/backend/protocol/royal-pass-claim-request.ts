// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class RoyalPassClaimRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RoyalPassClaimRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRoyalPassClaimRequest(bb:flatbuffers.ByteBuffer, obj?:RoyalPassClaimRequest):RoyalPassClaimRequest {
  return (obj || new RoyalPassClaimRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRoyalPassClaimRequest(bb:flatbuffers.ByteBuffer, obj?:RoyalPassClaimRequest):RoyalPassClaimRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RoyalPassClaimRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

buyerUserId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startRoyalPassClaimRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBuyerUserId(builder:flatbuffers.Builder, buyerUserId:bigint) {
  builder.addFieldInt64(0, buyerUserId, BigInt('0'));
}

static endRoyalPassClaimRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRoyalPassClaimRequest(builder:flatbuffers.Builder, buyerUserId:bigint):flatbuffers.Offset {
  RoyalPassClaimRequest.startRoyalPassClaimRequest(builder);
  RoyalPassClaimRequest.addBuyerUserId(builder, buyerUserId);
  return RoyalPassClaimRequest.endRoyalPassClaimRequest(builder);
}
}
