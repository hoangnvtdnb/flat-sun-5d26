// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UserDynamicSegmentInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserDynamicSegmentInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserDynamicSegmentInfo(bb:flatbuffers.ByteBuffer, obj?:UserDynamicSegmentInfo):UserDynamicSegmentInfo {
  return (obj || new UserDynamicSegmentInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserDynamicSegmentInfo(bb:flatbuffers.ByteBuffer, obj?:UserDynamicSegmentInfo):UserDynamicSegmentInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserDynamicSegmentInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

segmentVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

userSegment():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startUserDynamicSegmentInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSegmentVersion(builder:flatbuffers.Builder, segmentVersion:number) {
  builder.addFieldInt16(0, segmentVersion, 0);
}

static addUserSegment(builder:flatbuffers.Builder, userSegment:number) {
  builder.addFieldInt8(1, userSegment, 0);
}

static endUserDynamicSegmentInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUserDynamicSegmentInfo(builder:flatbuffers.Builder, segmentVersion:number, userSegment:number):flatbuffers.Offset {
  UserDynamicSegmentInfo.startUserDynamicSegmentInfo(builder);
  UserDynamicSegmentInfo.addSegmentVersion(builder, segmentVersion);
  UserDynamicSegmentInfo.addUserSegment(builder, userSegment);
  return UserDynamicSegmentInfo.endUserDynamicSegmentInfo(builder);
}
}
