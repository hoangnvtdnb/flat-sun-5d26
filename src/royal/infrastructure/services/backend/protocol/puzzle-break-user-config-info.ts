// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class PuzzleBreakUserConfigInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PuzzleBreakUserConfigInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPuzzleBreakUserConfigInfo(bb:flatbuffers.ByteBuffer, obj?:PuzzleBreakUserConfigInfo):PuzzleBreakUserConfigInfo {
  return (obj || new PuzzleBreakUserConfigInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPuzzleBreakUserConfigInfo(bb:flatbuffers.ByteBuffer, obj?:PuzzleBreakUserConfigInfo):PuzzleBreakUserConfigInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PuzzleBreakUserConfigInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userConfig():string|null
userConfig(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userConfig(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

userConfigVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startPuzzleBreakUserConfigInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addUserConfig(builder:flatbuffers.Builder, userConfigOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, userConfigOffset, 0);
}

static addUserConfigVersion(builder:flatbuffers.Builder, userConfigVersion:number) {
  builder.addFieldInt32(1, userConfigVersion, 0);
}

static endPuzzleBreakUserConfigInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPuzzleBreakUserConfigInfo(builder:flatbuffers.Builder, userConfigOffset:flatbuffers.Offset, userConfigVersion:number):flatbuffers.Offset {
  PuzzleBreakUserConfigInfo.startPuzzleBreakUserConfigInfo(builder);
  PuzzleBreakUserConfigInfo.addUserConfig(builder, userConfigOffset);
  PuzzleBreakUserConfigInfo.addUserConfigVersion(builder, userConfigVersion);
  return PuzzleBreakUserConfigInfo.endPuzzleBreakUserConfigInfo(builder);
}
}
