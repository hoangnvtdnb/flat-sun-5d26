// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UpdateTeamTreasureRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateTeamTreasureRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateTeamTreasureRequest(bb:flatbuffers.ByteBuffer, obj?:UpdateTeamTreasureRequest):UpdateTeamTreasureRequest {
  return (obj || new UpdateTeamTreasureRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateTeamTreasureRequest(bb:flatbuffers.ByteBuffer, obj?:UpdateTeamTreasureRequest):UpdateTeamTreasureRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateTeamTreasureRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teamTreasureEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

progress():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isValid():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isClaim():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isEligible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startUpdateTeamTreasureRequest(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addTeamTreasureEventId(builder:flatbuffers.Builder, teamTreasureEventId:number) {
  builder.addFieldInt32(0, teamTreasureEventId, 0);
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(1, teamId, BigInt('0'));
}

static addProgress(builder:flatbuffers.Builder, progress:number) {
  builder.addFieldInt32(2, progress, 0);
}

static addIsValid(builder:flatbuffers.Builder, isValid:boolean) {
  builder.addFieldInt8(3, +isValid, +false);
}

static addIsClaim(builder:flatbuffers.Builder, isClaim:boolean) {
  builder.addFieldInt8(4, +isClaim, +false);
}

static addIsEligible(builder:flatbuffers.Builder, isEligible:boolean) {
  builder.addFieldInt8(5, +isEligible, +false);
}

static endUpdateTeamTreasureRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateTeamTreasureRequest(builder:flatbuffers.Builder, teamTreasureEventId:number, teamId:bigint, progress:number, isValid:boolean, isClaim:boolean, isEligible:boolean):flatbuffers.Offset {
  UpdateTeamTreasureRequest.startUpdateTeamTreasureRequest(builder);
  UpdateTeamTreasureRequest.addTeamTreasureEventId(builder, teamTreasureEventId);
  UpdateTeamTreasureRequest.addTeamId(builder, teamId);
  UpdateTeamTreasureRequest.addProgress(builder, progress);
  UpdateTeamTreasureRequest.addIsValid(builder, isValid);
  UpdateTeamTreasureRequest.addIsClaim(builder, isClaim);
  UpdateTeamTreasureRequest.addIsEligible(builder, isEligible);
  return UpdateTeamTreasureRequest.endUpdateTeamTreasureRequest(builder);
}
}
