// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OTPVerificationType } from '../../../../../royal/infrastructure/services/backend/protocol/otpverification-type.js';


export class VerifyOTPRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerifyOTPRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerifyOTPRequest(bb:flatbuffers.ByteBuffer, obj?:VerifyOTPRequest):VerifyOTPRequest {
  return (obj || new VerifyOTPRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerifyOTPRequest(bb:flatbuffers.ByteBuffer, obj?:VerifyOTPRequest):VerifyOTPRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerifyOTPRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():OTPVerificationType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OTPVerificationType.Default;
}

otpCode():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

email():string|null
email(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
email(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startVerifyOTPRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:OTPVerificationType) {
  builder.addFieldInt8(0, type, OTPVerificationType.Default);
}

static addOtpCode(builder:flatbuffers.Builder, otpCode:number) {
  builder.addFieldInt32(1, otpCode, 0);
}

static addEmail(builder:flatbuffers.Builder, emailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, emailOffset, 0);
}

static endVerifyOTPRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVerifyOTPRequest(builder:flatbuffers.Builder, type:OTPVerificationType, otpCode:number, emailOffset:flatbuffers.Offset):flatbuffers.Offset {
  VerifyOTPRequest.startVerifyOTPRequest(builder);
  VerifyOTPRequest.addType(builder, type);
  VerifyOTPRequest.addOtpCode(builder, otpCode);
  VerifyOTPRequest.addEmail(builder, emailOffset);
  return VerifyOTPRequest.endVerifyOTPRequest(builder);
}
}
