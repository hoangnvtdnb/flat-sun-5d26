// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LevelWinMultiplier } from '../../../../../royal/infrastructure/services/backend/protocol/level-win-multiplier.js';


export class LogData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LogData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLogData(bb:flatbuffers.ByteBuffer, obj?:LogData):LogData {
  return (obj || new LogData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLogData(bb:flatbuffers.ByteBuffer, obj?:LogData):LogData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LogData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

levelWinMultiplier(index: number, obj?:LevelWinMultiplier):LevelWinMultiplier|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new LevelWinMultiplier()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

levelWinMultiplierLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startLogData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addLevelWinMultiplier(builder:flatbuffers.Builder, levelWinMultiplierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, levelWinMultiplierOffset, 0);
}

static createLevelWinMultiplierVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLevelWinMultiplierVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endLogData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLogData(builder:flatbuffers.Builder, levelWinMultiplierOffset:flatbuffers.Offset):flatbuffers.Offset {
  LogData.startLogData(builder);
  LogData.addLevelWinMultiplier(builder, levelWinMultiplierOffset);
  return LogData.endLogData(builder);
}
}
