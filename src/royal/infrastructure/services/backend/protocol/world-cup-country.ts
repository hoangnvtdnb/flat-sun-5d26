// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class WorldCupCountry {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WorldCupCountry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWorldCupCountry(bb:flatbuffers.ByteBuffer, obj?:WorldCupCountry):WorldCupCountry {
  return (obj || new WorldCupCountry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWorldCupCountry(bb:flatbuffers.ByteBuffer, obj?:WorldCupCountry):WorldCupCountry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WorldCupCountry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rank():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startWorldCupCountry(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, countryOffset, 0);
}

static addRank(builder:flatbuffers.Builder, rank:number) {
  builder.addFieldInt32(1, rank, 0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(2, score, 0);
}

static endWorldCupCountry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWorldCupCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset, rank:number, score:number):flatbuffers.Offset {
  WorldCupCountry.startWorldCupCountry(builder);
  WorldCupCountry.addCountry(builder, countryOffset);
  WorldCupCountry.addRank(builder, rank);
  WorldCupCountry.addScore(builder, score);
  return WorldCupCountry.endWorldCupCountry(builder);
}
}
