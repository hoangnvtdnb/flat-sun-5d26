// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class EnterTeamTournamentRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EnterTeamTournamentRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEnterTeamTournamentRequest(bb:flatbuffers.ByteBuffer, obj?:EnterTeamTournamentRequest):EnterTeamTournamentRequest {
  return (obj || new EnterTeamTournamentRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEnterTeamTournamentRequest(bb:flatbuffers.ByteBuffer, obj?:EnterTeamTournamentRequest):EnterTeamTournamentRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EnterTeamTournamentRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teamId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

totalScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

level():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

eventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startEnterTeamTournamentRequest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTeamId(builder:flatbuffers.Builder, teamId:bigint) {
  builder.addFieldInt64(0, teamId, BigInt('0'));
}

static addTotalScore(builder:flatbuffers.Builder, totalScore:number) {
  builder.addFieldInt32(1, totalScore, 0);
}

static addLevel(builder:flatbuffers.Builder, level:number) {
  builder.addFieldInt32(2, level, 0);
}

static addEventId(builder:flatbuffers.Builder, eventId:number) {
  builder.addFieldInt32(3, eventId, 0);
}

static endEnterTeamTournamentRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEnterTeamTournamentRequest(builder:flatbuffers.Builder, teamId:bigint, totalScore:number, level:number, eventId:number):flatbuffers.Offset {
  EnterTeamTournamentRequest.startEnterTeamTournamentRequest(builder);
  EnterTeamTournamentRequest.addTeamId(builder, teamId);
  EnterTeamTournamentRequest.addTotalScore(builder, totalScore);
  EnterTeamTournamentRequest.addLevel(builder, level);
  EnterTeamTournamentRequest.addEventId(builder, eventId);
  return EnterTeamTournamentRequest.endEnterTeamTournamentRequest(builder);
}
}
