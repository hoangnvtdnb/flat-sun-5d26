// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ByteArrayKeyType } from '../../../../../royal/infrastructure/services/backend/protocol/byte-array-key-type.js';


export class ByteArrayKeyValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ByteArrayKeyValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsByteArrayKeyValue(bb:flatbuffers.ByteBuffer, obj?:ByteArrayKeyValue):ByteArrayKeyValue {
  return (obj || new ByteArrayKeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsByteArrayKeyValue(bb:flatbuffers.ByteBuffer, obj?:ByteArrayKeyValue):ByteArrayKeyValue {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ByteArrayKeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():ByteArrayKeyType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ByteArrayKeyType.None;
}

value(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

valueLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

valueArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startByteArrayKeyValue(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, key:ByteArrayKeyType) {
  builder.addFieldInt8(0, key, ByteArrayKeyType.None);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static createValueVector(builder:flatbuffers.Builder, data:number[]|Int8Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createValueVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createValueVector(builder:flatbuffers.Builder, data:number[]|Int8Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startValueVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endByteArrayKeyValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createByteArrayKeyValue(builder:flatbuffers.Builder, key:ByteArrayKeyType, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  ByteArrayKeyValue.startByteArrayKeyValue(builder);
  ByteArrayKeyValue.addKey(builder, key);
  ByteArrayKeyValue.addValue(builder, valueOffset);
  return ByteArrayKeyValue.endByteArrayKeyValue(builder);
}
}
