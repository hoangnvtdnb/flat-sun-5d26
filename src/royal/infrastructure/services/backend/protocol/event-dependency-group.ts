// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GameEventType } from '../../../../../royal/infrastructure/services/backend/protocol/game-event-type.js';


export class EventDependencyGroup {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EventDependencyGroup {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEventDependencyGroup(bb:flatbuffers.ByteBuffer, obj?:EventDependencyGroup):EventDependencyGroup {
  return (obj || new EventDependencyGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEventDependencyGroup(bb:flatbuffers.ByteBuffer, obj?:EventDependencyGroup):EventDependencyGroup {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EventDependencyGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventTypeList(index: number):GameEventType|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

eventTypeListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

eventTypeListArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startEventDependencyGroup(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addEventTypeList(builder:flatbuffers.Builder, eventTypeListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, eventTypeListOffset, 0);
}

static createEventTypeListVector(builder:flatbuffers.Builder, data:GameEventType[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startEventTypeListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endEventDependencyGroup(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEventDependencyGroup(builder:flatbuffers.Builder, eventTypeListOffset:flatbuffers.Offset):flatbuffers.Offset {
  EventDependencyGroup.startEventDependencyGroup(builder);
  EventDependencyGroup.addEventTypeList(builder, eventTypeListOffset);
  return EventDependencyGroup.endEventDependencyGroup(builder);
}
}
