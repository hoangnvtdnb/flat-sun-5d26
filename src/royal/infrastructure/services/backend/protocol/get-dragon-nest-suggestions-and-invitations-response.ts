// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DragonNestFriendInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dragon-nest-friend-info.js';
import { DragonNestInvitationUserInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dragon-nest-invitation-user-info.js';
import { DragonNestSuggestionInfo } from '../../../../../royal/infrastructure/services/backend/protocol/dragon-nest-suggestion-info.js';


export class GetDragonNestSuggestionsAndInvitationsResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetDragonNestSuggestionsAndInvitationsResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetDragonNestSuggestionsAndInvitationsResponse(bb:flatbuffers.ByteBuffer, obj?:GetDragonNestSuggestionsAndInvitationsResponse):GetDragonNestSuggestionsAndInvitationsResponse {
  return (obj || new GetDragonNestSuggestionsAndInvitationsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetDragonNestSuggestionsAndInvitationsResponse(bb:flatbuffers.ByteBuffer, obj?:GetDragonNestSuggestionsAndInvitationsResponse):GetDragonNestSuggestionsAndInvitationsResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetDragonNestSuggestionsAndInvitationsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

invitations(index: number, obj?:DragonNestInvitationUserInfo):DragonNestInvitationUserInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DragonNestInvitationUserInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

invitationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

friends(index: number, obj?:DragonNestFriendInfo):DragonNestFriendInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DragonNestFriendInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

friendsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

suggestions(index: number, obj?:DragonNestSuggestionInfo):DragonNestSuggestionInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new DragonNestSuggestionInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

suggestionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGetDragonNestSuggestionsAndInvitationsResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addInvitations(builder:flatbuffers.Builder, invitationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, invitationsOffset, 0);
}

static createInvitationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInvitationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFriends(builder:flatbuffers.Builder, friendsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, friendsOffset, 0);
}

static createFriendsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFriendsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSuggestions(builder:flatbuffers.Builder, suggestionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, suggestionsOffset, 0);
}

static createSuggestionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSuggestionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGetDragonNestSuggestionsAndInvitationsResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetDragonNestSuggestionsAndInvitationsResponse(builder:flatbuffers.Builder, invitationsOffset:flatbuffers.Offset, friendsOffset:flatbuffers.Offset, suggestionsOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetDragonNestSuggestionsAndInvitationsResponse.startGetDragonNestSuggestionsAndInvitationsResponse(builder);
  GetDragonNestSuggestionsAndInvitationsResponse.addInvitations(builder, invitationsOffset);
  GetDragonNestSuggestionsAndInvitationsResponse.addFriends(builder, friendsOffset);
  GetDragonNestSuggestionsAndInvitationsResponse.addSuggestions(builder, suggestionsOffset);
  return GetDragonNestSuggestionsAndInvitationsResponse.endGetDragonNestSuggestionsAndInvitationsResponse(builder);
}
}
