// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { WorldCupStage } from '../../../../../royal/infrastructure/services/backend/protocol/world-cup-stage.js';


export class EnterWorldCupRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EnterWorldCupRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEnterWorldCupRequest(bb:flatbuffers.ByteBuffer, obj?:EnterWorldCupRequest):EnterWorldCupRequest {
  return (obj || new EnterWorldCupRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEnterWorldCupRequest(bb:flatbuffers.ByteBuffer, obj?:EnterWorldCupRequest):EnterWorldCupRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EnterWorldCupRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stage():WorldCupStage {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WorldCupStage.Upcoming;
}

country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEnterWorldCupRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addUserEventId(builder:flatbuffers.Builder, userEventId:number) {
  builder.addFieldInt32(0, userEventId, 0);
}

static addStage(builder:flatbuffers.Builder, stage:WorldCupStage) {
  builder.addFieldInt8(1, stage, WorldCupStage.Upcoming);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, countryOffset, 0);
}

static endEnterWorldCupRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEnterWorldCupRequest(builder:flatbuffers.Builder, userEventId:number, stage:WorldCupStage, countryOffset:flatbuffers.Offset):flatbuffers.Offset {
  EnterWorldCupRequest.startEnterWorldCupRequest(builder);
  EnterWorldCupRequest.addUserEventId(builder, userEventId);
  EnterWorldCupRequest.addStage(builder, stage);
  EnterWorldCupRequest.addCountry(builder, countryOffset);
  return EnterWorldCupRequest.endEnterWorldCupRequest(builder);
}
}
