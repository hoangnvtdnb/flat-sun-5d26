// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ClaimedEvents {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClaimedEvents {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClaimedEvents(bb:flatbuffers.ByteBuffer, obj?:ClaimedEvents):ClaimedEvents {
  return (obj || new ClaimedEvents()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClaimedEvents(bb:flatbuffers.ByteBuffer, obj?:ClaimedEvents):ClaimedEvents {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClaimedEvents()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

balloonRiseClaimedEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

magicCauldronClaimedEventId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startClaimedEvents(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBalloonRiseClaimedEventId(builder:flatbuffers.Builder, balloonRiseClaimedEventId:number) {
  builder.addFieldInt32(0, balloonRiseClaimedEventId, 0);
}

static addMagicCauldronClaimedEventId(builder:flatbuffers.Builder, magicCauldronClaimedEventId:number) {
  builder.addFieldInt32(1, magicCauldronClaimedEventId, 0);
}

static endClaimedEvents(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createClaimedEvents(builder:flatbuffers.Builder, balloonRiseClaimedEventId:number, magicCauldronClaimedEventId:number):flatbuffers.Offset {
  ClaimedEvents.startClaimedEvents(builder);
  ClaimedEvents.addBalloonRiseClaimedEventId(builder, balloonRiseClaimedEventId);
  ClaimedEvents.addMagicCauldronClaimedEventId(builder, magicCauldronClaimedEventId);
  return ClaimedEvents.endClaimedEvents(builder);
}
}
